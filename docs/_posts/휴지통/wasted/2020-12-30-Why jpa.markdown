---
layout: default
title:  "Why JPA?"
categories: Legacy
date:   2020-12-30 06:06:23 +0900
comments: true
published: false
---

 아래 내용은 주로 김영한님의 자바 ORM 표준 JPA 프로그래밍 -기본편-의 내용을 정리한 것입니다.
 
 ## 내가 처음 spring, data jpa를 봤던 순간과 지금 내가 즐거운 이유
 
 이전에 김영한님의 스프링 입문 강좌를 듣고, 내가 NBP에서 인턴할 때 처음으로 java spring data jpa를 사용할 때가 생각났다. 나는 그 때가 db도 사실상 거의 처음 사용하는 것이었고, java spring의 bean과 같은 개념도 모르는데 이를 이용해 CRUD를 날리는 웹 어플리케이션을 개발해야하는 상황이었다. 그러니 그게 될 리가 있나. 특히 그런 압박을 받는 상황에서
 
 그런 관점에서 이번에 시작한 강좌는 너무도 가뭄에 단비같은 강좌다. 여러 강좌들에서 java spring을 배우려 했지만, 대부분이 jpa를 그냥 후루룩 뚝딱하고 가르치기만 할 뿐 이게 애초에 spring과 떼어놓고 볼 수 있는 프레임워크인지도 이야기한 적이 없었기 때문이다. 게다가 이게 왜 필요한지 역시도
 
 jPA는 Java persistence API의 준말로, Java를 관계형 db와 함께 사용하기 위해 의존성을 해소시켜주는 프레임워크이다. 이를 가지고 ORM이라고도 부르는데 Object Relational Mapping의 준말이다. 읽어보면 결국 같은 말이다.
 
 ## Why JPA? ORM? OOP vs Relational
 
 그렇다면 왜 둘 사이에는 매핑이 필요할까? 이는 두 기술이 가지고 있는 패러다임이 다르기 때문이다. 자바는 근본적으로 객체지향형 프로그래밍 언어인 반면, 우리가 주로 사용하는 mysql, oracle과 같은 rdb는 관계를 지향하기 때문이다.
 
 이와 관련된 예시에는 수많은 것이 있지만, 내가 다 기억하지는 못하고 몇 가지만 이야기하자면 객체 지향형 언어인 자바는 이를 통해 안에서 일어나는 일들을 숨길 수가 있다. 예를 들어 member의 member.run이라는 함수를 만들었다고 하자. 그러면 이 안에서 처음에 실행했을때 현재 위치에서 + 10만큼의 이동이 발생했다고 하자. 그리고 나중에는 +20만큼의 이동이 발생하게 수정했다고 하자.
 
 자바의 관점에서 이는 member안의 run 메서드만 변환해주면 되는 일이다. 하지만 이를 rdb와 연동해서 변환된 값이 저장되도록 하려면 여기에 사용하는 쿼리의 로직을 우리가 동시에 수정해야한다. 실제로 이런 함수가 있다면 의존성이 없도록 구현하는게 가능은 하겠지만 예시를 많이 단순화해서 이야기한다.
 
 ## more specific example
 
 좀 더 사실에 가까운 복잡한 예시를 들어볼까? table 내에 join을 통해 복잡한 데이터를 가지고 올 수 있는 경우를 상상해보자. 예를 들어 도서관에서 라이트 노벨에 관련한 데이터를 불러온다고 상상해보라. 이를 자바 코드로 구현하면 다음과 같을 것이다.
 
 LightNovel book = library.findBookById(bookId);
 
 그런데 이 안에 라이트 노벨만이 가지고 있는 특징, 예를 들어 has animation이라는 값을 호출하려고 한다 하자.
 
 System.out.println(book.hasAnimation())
 
 그렇다면 처음부터 findBookById는 Book이라는 interface를 통한 값을 불러오는 것이 아니라, join한 테이블 내의 값을 db에서부터 가져와야 한다. 그렇다면 우리는 객체지향형 프로그래밍을 통해 상속한 모든 클래스 함수들마다 쿼리를 다 만들어 주어야한다는 말이 된다.
 
 ## another example
 
 만약에 쿼리가 바뀌는 경우는 어떤가? 우리가 처음에는 라이트노벨 테이블에 이름, id만을 가지고 있는 상태로 프로그램을 작성했다 가정하자. 그런데 만약 작가를 나중에 추가한다고 하면? 우리는 자바 코드에서
 
 class LightNovel {
 
 	...
 	String writer;
 }
 
 를 추가하는 것 뿐 아니라 기존에 있었던 LightNovel에 관련한 CRUD 쿼리들을 수정해야하는 불상사를 맞이하게 된다.
 
 Insert into LightNovel(id, name) values(...)
 Update LightNovel set(...)
 
 이런 단순 반복 작업들 역시도, ORM 관점에서 JPA는 해소해주기 때문에 우리는 개발할 때 많은 부분을 신경쓰지 않고 진행할 수 있게 해준다
 
 ## 결론
 
 이렇게 공부하려는 내용이 왜 나에게 유용한지, 없었을 때는 무슨 문제가 있었는지 알게 되는 것은 기술의 핵심적인 기능에 대한 이해를 높여주기 때문에 가장 중요하게 다뤄야한다고 생각한다. 이번 기회를 통해 내가 어설프게나마 따라해 본 적이 있었던 spring jpa에 대해 알 수 있었고, 이 강좌를 끝까지 마무리할 수 있을 것 같다는 생각이 들게 됐다.
 
 덧붙여 나중에 블로그를 category에 따라 분류할 방법에 대해서도 슬슬 고민할 시기가 온 것 같다다