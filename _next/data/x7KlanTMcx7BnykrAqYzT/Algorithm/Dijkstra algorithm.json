{"pageProps":{"postDataJson":{"postName":"2024-05-10-Shortest Path(3)","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/Algorithm/이론/2024-05-10-Shortest Path(3).md","category":"Algorithm","title":"Dijkstra algorithm","subtitle":"single-source shortest path algorithm(3)","content":"\n### 목차\n\n- [1. Introduction](#1-introduction)\n- [2. Algorithm by pseudocode](#2-algorithm-by-pseudocode)\n- [Algorithm by python](#algorithm-by-python)\n- [Time complexity](#time-complexity)\n- [Reference](#reference)\n\n---\n\n## 1. Introduction\n\n`Dijkstra algorithm`은 `단일 출발점 최단 경로 알고리즘` 중 하나로, `음수 가중치`를 가진 간선이\n포함된 그래프에서는 사용할 수 없다. 대신 음수 가중치를 가진 간선이 없는 그래프에서는 `Bellman-ford algorithm`보다\n더 빠르게 동작한다.\n\n이를 위해 `Dijkstra algorithm`은 `priority queue`를 사용하여 최단 거리를 계산하며, 이미 계산이 완료된 정점\n들은 다시 계산하지 않는다. 이 때문에 `Dijkstra algorithm`은 `그리디 알고리즘`으로 분류된다.\n\n---\n\n## 2. Algorithm by pseudocode\n\n`Dijkstra algorithm`은 다음과 같은 방식으로 동작한다.\n\n```plaintest\nDIJKSTRA(G, w, s)\n1  INITIALIZE-SINGLE-SOURCE(G, s)  // 모든 정점의 거리 값을 무한대로 초기화하고, 시작점의 거리 값을 0으로 설정합니다.\n2  S = {}  // 최단 경로가 발견된 정점들의 집합 S를 초기화합니다.\n3  Q = V[G]  // 모든 정점들을 포함하는 우선순위 큐 Q를 생성합니다.\n4  while Q != {}  // Q가 빌 때까지 반복합니다.\n5      u = EXTRACT-MIN(Q)  // Q에서 거리 값이 가장 작은 정점 u를 추출합니다.\n6      S = S append {u}  // u를 S에 추가합니다.\n7      for each vertex v in Adj[u]  // u의 모든 인접 정점 v에 대해\n8          RELAX(u, v, w)  // u를 통해 v로 가는 경로가 더 짧은지 확인하고, 더 짧다면 v의 거리 값을 갱신합니다.\n```\n\n`DIJKSTRA(G, w, s)`: 그래프 `G`와 가중치 함수 `w`, 시작 정점 `s`를 입력으로 받아 최단 경로를 계산한다.\n\n이 때 사용하는 자료구조는 다음과 같다.\n\n- `S`: 이미 최단 거리를 계산한 정점의 집합\n- `Q`: 아직 최단 거리를 계산하지 않은 정점의 집합\n- `V[G]`: 그래프 `G`의 정점 집합\n- `Adj[u]`: 정점 `u`에 인접한 정점들의 집합\n\n---\n\n## Algorithm by python\n\n```python\nimport heapq\n\ndef dijkstra(graph, start):\n    distance, predecessor = dict(), dict()\n    # 각 노드의 거리와 선행 노드를 초기화합니다\n    for node in graph:\n        distance[node], predecessor[node] = float('inf'), None\n    distance[start] = 0\n\n    # 우선순위 큐를 초기화합니다\n    queue = [(0, start)]\n\n    while queue:\n        # 우선순위 큐에서 가장 가까운 노드를 추출합니다\n        current_distance, current_node = heapq.heappop(queue)\n        # 이미 처리된 노드인 경우 건너뜁니다\n        if current_distance > distance[current_node]:\n            continue\n        # 인접 노드에 대해 최단 거리를 갱신합니다\n        for neighbor, weight in graph[current_node].items():\n            new_distance = current_distance + weight\n            if new_distance < distance[neighbor]:\n                distance[neighbor] = new_distance\n                predecessor[neighbor] = current_node\n                heapq.heappush(queue, (new_distance, neighbor))\n    return distance, predecessor\n```\n\n---\n\n## Time complexity\n\n`Dijkstra algorithm`의 시간 복잡도는 `O((V + E) log V)`이다. 이는 `priority queue`를 사용하여\n최단 거리를 계산하기 때문에 정점을 추출하는 과정이 `O(log V)`이기 때문이다. Bellman-ford algorithm과\n달리 모든 간선이 아니라 `최소 거리를 가진 정점만`을 추출하여 계산하기 때문에 더 빠르게 동작한다.\n\n---\n\n## Reference\n\n- [Dijkstra algorithm - wikipedia](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm)\n- [Dijkstra algorithm - geeksforgeeks](https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-greedy-algo-7/)\n- [Introduction to algorithms, 3rd edition](https://mitpress.mit.edu/books/introduction-algorithms-third-edition)\n","layout":"series_mathjax","recommended":false,"data":{"layout":"series_mathjax","classes":"wide","title":"Dijkstra algorithm","subtitle":"single-source shortest path algorithm(3)","date":"2024-05-07T00:00:00.000Z","categories":"Algorithm","series":"single-source shortest path algorithm","seriesIndex":3}},"title":"Dijkstra algorithm","category":"Algorithm","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"Bellman-ford algorithm","category":"Algorithm"},"next":null}},"__N_SSG":true}