{"pageProps":{"postDataJson":{"postName":"2024-04-21-4월 4주차 알고리즘 문제","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/Algorithm/Weekly Algorithms/2024-04-21-4월 4주차 알고리즘 문제.md","category":"Algorithm","title":"4월 4주차 알고리즘 문제","subtitle":"gap 채우기, sum of all odd length subarrays","content":"\n### 목차\n\n- [정렬된 수 사이에 gap을 채우기](#정렬된-수-사이에-gap을-채우기)\n- [sum of all odd length subarrays](#sum-of-all-odd-length-subarrays)\n\n---\n\n## 정렬된 수 사이에 gap을 채우기\n\n- [문제 링크](https://leetcode.com/problems/maximum-element-after-decreasing-and-rearranging/description/)\n- [내 풀이](https://github.com/kaestro/algorithms_v3/commit/4d05a526eabd8241f08d206d321e807fa5017fb8)\n\n- 문제 요약\n  - 주어진 integer array에서 각 요소를 재배열하거나 작아지게 하는 연산을 통해 각 element 간의 차이가 1 이하가 되도록 만들 때, 마지막 요소의 최대값을 구하라.\n- 풀이 요약\n  - 기존 풀이\n    - 각 수를 set으로 만들어 정렬한다\n    - 수 사이의 gap을 찾는다.\n    - gap이 1 이상인 경우, gap을 채운다.\n  - 개선 풀이\n    - 수를 정렬한다.\n    - 이전 수와 현재 수의 차이가 1 이상인 경우, 현재 수를 이전 수 + 1로 만든다.\n\n```python\ndef maximumElementAfterDecrementingAndRearranging(arr: List[int]) -> int:\n  arr sort()\n  prev = 0\n  for i in range(1, len(arr)):\n      if arr[i] - arr[prev] > 1:\n          arr[i] = arr[prev] + 1\n      prev = i\n\n  return arr[-1]\n```\n\n---\n\n## sum of all odd length subarrays\n\n- [문제 링크](https://leetcode.com/problems/sum-of-all-odd-length-subarrays/)\n- [내 풀이](https://github.com/kaestro/algorithms_v3/commit/cd8f5cd113d3a4f802efe154e84989e8746f9ab9)\n\n- 문제 요약\n  - 주어진 integer array에서 odd length subarray의 합을 구하라.\n- 기존 풀이\n  - prefix sum을 구한다.\n  - 이를 이용해 odd length subarray의 합을 구한다.\n  - Time complexity: $$O(n^2)$$\n- [개선 풀이](https://leetcode.com/problems/sum-of-all-odd-length-subarrays/solutions/854184/java-c-python-o-n-time-o-1-space/?source=submission-ac)\n  - arr[k]가 포함된 subarray의 개수는 $$(k+1) * (n-k)$$이다.\n  - 따라서, arr[k]가 포함된 subarray의 합은 $$arr[k] * (k+1) * (n-k)$$이다.\n  - 이 중 홀수 길이의 subarray의 갯수는 전체 길이가 홀수인 경우 짝수보다 1개 더 많다.\n  - Time complexity: $$O(n)$$\n\n```python\ndef sumOddLengthSubarrays(arr: List[int]) -> int:\n  n = len(arr)\n  ans = 0\n  for i in range(n):\n      ans += ((i + 1) * (n - i) + 1) // 2 * arr[i]\n  return ans\n```\n","layout":"mathjax","recommended":false,"data":{"layout":"mathjax","classes":"wide","title":"4월 4주차 알고리즘 문제","subtitle":"gap 채우기, sum of all odd length subarrays","date":"2024-04-21T00:00:00.000Z","categories":"Algorithm"}},"title":"4월 4주차 알고리즘 문제","category":"Algorithm","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"4월 3주차 알고리즘 문제","category":"Algorithm"},"next":{"title":"4월 5주차 알고리즘 문제","category":"Algorithm"}}},"__N_SSG":true}