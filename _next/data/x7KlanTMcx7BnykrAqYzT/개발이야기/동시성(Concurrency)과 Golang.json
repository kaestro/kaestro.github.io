{"pageProps":{"postDataJson":{"postName":"2024-03-19-Golang은 동시성이 어떤 점에서 유리한가","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/개발이야기/2024-03-19-Golang은 동시성이 어떤 점에서 유리한가.md","category":"개발이야기","title":"동시성(Concurrency)과 Golang","subtitle":"Golang은 진정 동시성을 처리하는 데 유리한가?","content":"\n## 개요\n\n컴퓨터에서 **여러 프로그램을 한꺼번에 처리**하는 방법 중에 **동시성**과 **병렬성**이 있다. **Golang**은 **동시성**을 처리하기에 용이하도록 설계한 언어로, 이를 위해 **Goroutine**, **Channel** 등의 기능을 제공한다. 해당 기능들 덕분에 Golang은 다른 언어에 비해 **동시성을 처리하는 데 유리하다**고 할 수 있다.\n\n---\n\n## 목차\n\n1. **동시성**이란: 병렬성 vs 동시성\n2. **기존**의 동시성 **처리 방법**: 멀티 태스킹, 스레드, context switching\n3. **Goroutine**: Go에서 스레드를 다루는 방법\n4. **Channel**: Goroutine 간의 통신\n5. **결론**: GoLang은 동시성 처리가 용이하게 설계됐고, **다른 언어에 없는 기능**을 통해 이를 실천하고 있다.\n6. **의문점**: 다른 언어들은 어떻게 동시성을 처리하는가?\n7. 참고자료\n\n---\n\n## 동시성이란\n\n### 병렬성 vs 동시성\n\n컴퓨터에서 **여러 작업**을 **동시**에 처리하는 방법에는 **병렬성**과 **동시성**이 있다. 이 때 병렬성과 동시성은 다음과 같이 정리할 수 있다.\n\n* 병렬성(Parallelism): 여러 일을 **한꺼번에 실행하는 방법**에 관한 것이다.\n* 동시성(Concurrency): 여러 일을 **한꺼번에 다루는 문제**에 관한 것이다.\n\n이 때 **병렬성**은 **여러 프로세서**가 **동시에** 여러 작업을 처리하는 것을 의미하고, **동시성**은 **하나의 프로세서**가 여러 작업을 **번갈아**가며 처리하는 것을 의미한다.[^1]\n\n#### 즉, Go가 동시성을 처리하는 데 유리하다면 작업 간에 **전환이 빠르다**는 것을 의미한다. 그리고 Go는 동시성을 처리하는 데 유리하게 **설계**된 언어이다[^3]\n\n---\n\n## 기존의 동시성 처리 방법\n\n* **멀티 태스킹**\n  * 여러 작업들을 **번갈아가며 처리**하는 것\n  * **시분할 시스템**을 통해 **CPU를 공유**하여 여러 작업을 처리한다.\n* **스레드**를 이용한 동시성 처리\n  * 스레드는 프로세스 내에서 **코드 실행**을 담당하는 **최소의 단위**이다.\n* **context switching**\n  * **스레드** 간에 **전환**을 하는 것\n  * **system call**을 통해 **커널**에 요청을 하여 스레드를 전환한다.\n  * system call은 **비용**이 많이 든다.\n\n---\n\n## Goroutine: Go에서 스레드를 다루는 방법\n\n* **goroutine**은 스레드가 아니라, **runtime scheduler**를 통해 관리된다.\n* **runtime scheduler**를 통해 **system call**을 더 **적게** 사용하고 동시성을 구현할 수 있다.\n* **system call 필요한 연산**이 생길 경우 발생하는 **blocking**은 runtime scheduler가 **다른 goroutine**으로 **context switching**해서 해결한다.[^2]\n\n---\n\n## Channel: Goroutine 간의 통신\n\n* **channel**은 **goroutine** 간에 **데이터를 주고 받는** 방법이다.\n* [할당하고 전달할 수 있는 1급 객체 값(first-class value)이다.](https://go.dev/doc/effective_go#chan_of_chan)\n  * [1급 객체란?](https://medium.com/@lazysoul/functional-programming-%EC%97%90%EC%84%9C-1%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%9E%80-ba1aeb048059)\n    * **변수/데이터**에 할당할 수 있다.\n    * 객체의 **인자(parameter)**로 사용할 수 있다.\n    * 객체의 **반환값(return value)**으로 사용할 수 있다.\n* 장점\n  * **동기화**를 위해 **mutex**를 사용하지 않아도 된다.\n  * *공유*가 아닌 **소유권 이전**이므로 **데이터 레이스**가 발생하지 않는다.\n  * **비동기**로 데이터를 주고 받을 수 있다.\n* 단점\n  * **데이터를 주고 받는 비용**이 발생한다.\n  * **성능**이 mutex에 비해 **떨어질 수 있다**\n\n| Channel | Mutex |\n| ------- | ----- |\n| 데이터의 소유권을 이전한다 | 캐시 |\n| 일의 단위를 나누어서 처리한다 | 상태 |\n| 비동기 결과를 소통한다 | 데이터를 공유한다 |\n\n---\n\n## 결론\n\n**GoLang**은 태생적으로 **동시성**을 처리하기에 효율적인 방법을 고안하여 만들어진 언어이다. 이를 위해 **Goroutine**과 **Channel**과 같은 기능을 제공하고 있다. 이 때문에 Golang이 **동시성을 처리하는 데 유리**하다고 할 수 있다.\n\n---\n\n## 의문점\n\n* **다른 언어**들은 어떻게 동시성을 처리하는가?\n* 어떤 점에서 이들은 Golang에 비해 동시성을 처리하는 것이 **불편**한가?\n\n---\n\n## 참고자료\n\n* [effective go - concurrency](https://go.dev/doc/effective_go#concurrency)\n* [Mutex or Channel](https://go.dev/wiki/MutexOrChannel)\n* [동시성을 구현하는 기술](https://deview.kr/data/deview/session/attach/1_Inside%20React%20(%E1%84%83%E1%85%A9%E1%86%BC%E1%84%89%E1%85%B5%E1%84%89%E1%85%A5%E1%86%BC%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%80%E1%85%AE%E1%84%92%E1%85%A7%E1%86%AB%E1%84%92%E1%85%A1%E1%84%82%E1%85%B3%E1%86%AB%20%E1%84%80%E1%85%B5%E1%84%89%E1%85%AE%E1%86%AF).pdf)\n* [Go에서 동시성이란](https://seung.tistory.com/entry/GoLang-Go%EC%97%90%EC%84%9C-%EB%8F%99%EC%8B%9C%EC%84%B1%EC%9D%B4%EB%9E%80)\n* [1급 객체란?](https://medium.com/@lazysoul/functional-programming-%EC%97%90%EC%84%9C-1%EA%B8%89-%EA%B0%9D%EC%B2%B4%EB%9E%80-ba1aeb048059)\n\n[^1]: [동시성과 병렬성의 개념 차이](https://velog.io/@kwontae1313/%EB%8F%99%EC%8B%9C%EC%84%B1%EA%B3%BC-%EB%B3%91%EB%A0%AC%EC%84%B1%EC%9D%98-%EA%B0%9C%EB%85%90%EA%B3%BC-%EC%B0%A8%EC%9D%B4)\n[^2]: [Golang은 왜 동시성에 좋다고 할까](https://velog.io/@hyeok3011/Goroutine)\n[^3]: [Concurrency is not parallelism](https://go.dev/blog/waza-talk)\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","subtitle":"Golang은 진정 동시성을 처리하는 데 유리한가?","title":"동시성(Concurrency)과 Golang","date":"2024-03-19T00:00:00.000Z","categories":"개발이야기"}},"title":"동시성(Concurrency)과 Golang","category":"개발이야기","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"Docker를 이용한 유용한 빌드 방법","category":"개발이야기"},"next":{"title":"Locust vs k6 - 부하 테스트 도구 선택","category":"개발이야기"}}},"__N_SSG":true}