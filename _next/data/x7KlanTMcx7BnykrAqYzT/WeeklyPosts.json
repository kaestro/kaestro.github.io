{"pageProps":{"posts":[{"postName":"2024-02-12-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-02-12-Medium review.md","category":"WeeklyPosts","title":"2월 2주차 포스트","subtitle":"","content":"\n1. How I Won Singapore’s GPT-4 Prompt Engineering Competition\n2. Taylor Swift Ticketmaster Meltdown: A System Design Analysis\n3. Advice to my younger self and you after 20 years in programming\n\n---\n\n## 싱가포르의 GPT-4 프롬프트 엔지니어링 대회에서 우승한 방법\n\n: <https://medium.com/towards-data-science/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41>\n\n요즘 부쩍 생성형 ai를 쓸 일이 많아지면서, 많이 하게 되는 고민은 '어떻게 하면 더 좋은 질문을 할 수 있을까?'입니다. 해당 글에서는 이를 총 4가지로 나누어 설명합니다.\n\n* 초급\n  * COSTAR 프레임워크를 사용하라\n  * 구분 기호를 사용하라\n* 고급\n  * LLM 가드레일을 사용하라\n  * 데이터세트 실습 예제를 통한 활용 방법\n\n저는 당장은 데이터 세트 분석에는 관심이 없기에 앞의 세 가지 항목만 참고했고, 굉장히 도움을 많이 받고 있는 중 입니다.\n\n### COSTAR framework\n\nCOSTAR framework는 생성형 ai를 사용할 때 주의할 6가지의 키워드를 말합니다.\n\n1. Context: 맥락\n2. Objective: 목적\n3. Style: 문체\n4. Tone: 응답 태도\n5. Audience: 청중\n6. Response: 응답 형식\n\n대표적으로 요즘 활용하고 있는 방식을 예로 들자면, 제가 자료구조와 알고리즘에 관한 개념적인 복습을 면접을 보기 직전에 하려고 하는 상황을 가정해보겠습니다. 제가 처음에 접근한 방식은 이런 식이었습니다.\n\n#### \"회사에서 주니어 개발자에게 물어볼 만한 자료구조와 알고리즘적 질문들에는 어떤 것이 있을지 제시해줄래?\"\n\n이 때 제안해주는 답변은 다음과 같습니다.\n\n```md\n회사에서 주니어 개발자에게 물어볼 수 있는 몇 가지 자료구조와 알고리즘적 질문에 대해 알려드리겠습니다:\n\n해시맵 구현: 해시맵(해시 테이블)의 작동 원리를 설명하고, 이를 파이썬에서 어떻게 구현할 수 있는지에 대해 물을 수 있습니다.\n\n이진 탐색 트리: 이진 탐색 트리의 특징을 설명하고, 특정 값을 찾거나 삽입하는 작업을 어떻게 수행하는지에 대해 물을 수 있습니다.\n\n...\n```\n\n물론 이 답변도 괜찮긴 합니다만, 제게 있어서 아쉬운 점은 이제 이런 키워드가 제시됐을 때 어떤 순서로 구조화된 공부를 할지에 대해서 잘 모르겠다는 것이었습니다. 이전에는 해당 답변을 받은 다음에, \"리스트와 딕셔너리에 관련해서 물어볼만한 질문에는 어떤 것들이 있을까?\" 와 같은 질문을 통해 공부를 했습니다. 그리고 이것은 꽤나 유용한 학습 방법이었습니다. chatgpt가 없을 때에 비교하면 많이 효율적이고요.\n\n하지만 해당 medium 글을 읽은 후에는 다음과 같은 식으로 질문을 하게 됐습니다. \n\n#### 다음 주에 컴퓨터 공학부 학생들을 대상으로 자료구조와 알고리즘 강의를 하게 됐어. 해당 학생들은 곧 졸업하고 취업을 앞두고 있어. 기본적인 개념의 이해는 돼있지만, 이를 복습하고 시험을 준비하는 과정이 필요하다 할때 커리큘럼을 작성해보려하는데 도와줄래?\n\n그리고 이전과 비해서 '졸업하고 취업을 앞둔 컴퓨터 공학부'라는 명확한 독자를 설정하고, '시험을 준비하는 커리큘럼 준비'라는 맥락을 제시하기 때문에 좀 더 나은 답변을 얻을 수 있게 됐습니다.\n\n```md\n물론이죠! 학생들이 기본 개념을 알고 있지만 실전 경험이 필요한 상황에서는 다음과 같은 커리큘럼을 고려해볼 수 있습니다:\n\n자료구조 복습\n\n배열(Array), 연결 리스트(Linked List), 스택(Stack), 큐(Queue), 트리(Tree), 그래프(Graph) 등의 자료구조를 복습합니다.\n각 자료구조의 특징, 장단점, 구현 방법 등을 다룹니다.\n\n알고리즘 복습\n\n정렬 알고리즘(Sorting Algorithms): 버블 정렬, 선택 정렬, 삽입 정렬, 퀵 정렬, 병합 정렬 등을 복습합니다.\n검색 알고리즘(Search Algorithms): 선형 검색(Linear Search), 이진 검색(Binary Search) 등을 다룹니다.\n그래프 알고리즘(Graph Algorithms): BFS, DFS 등의 기본적인 그래프 탐색 알고리즘을 다룹니다.\n\n문제 해결 능력 향상\n\n실제 문제를 풀어보며 알고리즘을 적용하는 능력을 향상시킵니다.\n온라인 저지(Online Judge) 사이트를 활용하여 다양한 알고리즘 문제를 풀어봅니다.\n\n코딩 테스트 대비\n\n주어진 문제를 효율적으로 해결하기 위한 코딩 테스트 전략과 팁을 공유합니다.\n실전에서 사용되는 자료구조와 알고리즘을 익히고 효율적인 코드를 작성하는 연습을 합니다.\n\n프로젝트 실습\n\n자료구조와 알고리즘을 활용하여 간단한 프로젝트를 진행합니다.\n예를 들어, 그래프 알고리즘을 사용하여 경로 탐색 알고리즘을 구현하는 프로젝트를 할 수 있습니다.\n```\n\n이처럼 단순히 학습을 할 내용을 떠나 조금 더 구체적인 학습의 방식도 제안해주는 것이 꽤나 도움이 많이 됐습니다. \n\n그 다음 항목인 ###를 통해 내용을 나누는 것도 꽤나 많은 도움을 받고 있습니다. 가령, User.py에 정의된 ORM 객체인 User를 이용해서 Login이라는 api를 구현해야한다고 할 경우에\n\n```md\nLogin api를 login.py에 작성하고 싶어. Login은 input으로 email, password를 받고 이를 Oauth2를 통해 토큰을 만들어 반환해주는 인증 api야. 해당 정보를 저장하기 위한 database 모듈과 소통하기 위한 방식은 ORM을 채용하고 있어. Login이 정보를 주고 받게 될 Model은 다음과 같아\n\n###\n\nUser.py의 코드 내용\n```\n\n와 같은 방식으로 질문을 작성하게 됐습니다.\n\n3번째 항목은, chat gpt의 custom instructions에서 요구하는 두 가지 질문을 어떻게 답변할 것인지에 대해 이야기합니다. custom instructions는 우리가 프롬프트에 입력하는 것과는 별개로, 답변을 할 때 고정적으로 chatgpt가 명심해두어야하는 다음과 같은 질문에 대한 답변들을 말합니다.\n\n```md\n1. What would you like ChatGPT to know about you to provide better responses?\n2. How would you like ChatGPT to respond?\n```\n\n글의 저자는 다음과 같은 것을 작성하길 추천하고 있습니다.\n\n```md\n* Task Definition: You will answer questions using this text: [insert text].\n* Output Format: You will respond with a JSON object in this format: {`Question`: `Answer`}\n* If the text does not contain sufficient information to answer the question, do not make up information and give the answers as \"NA\".\n```\n\n저 같은 경우는 다음과 같은 것을 사용하고 있는 중입니다.\n\n```\n* I'm an Junior Programmer who has bachelor's degree on Electricity and computer engineering.\n* Right now I'm trying to earn a job as a software designer\n* I used to be good at algorithms and solving program problems, but not been programming for about 1.5 years\n* I'm trying to learn  how to solve the problems using programs, not wanting to get the sole answers\n* I'm a Korean who is fairly good at English, but much better at using Korean Language\n\n* Don't just give the answers from the scratch code level answers.\n* Try to lead me by giving rough hints that doesn't directly lead to the answer. Instead give vague concepts on how to get direct me to the answer.\n* Try to use vocabularies that are frequently used computer programming environment.\n* 질문에 답하려면 [텍스트 삽입]이라는 텍스트를 사용하세요.\n* 본인이 질문에 답하기에 충분한 정보가 포함되어 있지 않은 경우 정보를 구성하지 말고 \"NA\"로 답하십시오.\n```\n\n---\n\n## Taylor Swift Ticketmaster Meltdown: 시스템 설계 분석\n\n: <https://learningdaily.dev/taylor-swift-ticketmaster-meltdown-a-system-design-analysis-cd326f7ed57b>\n\n요 근래 테일러 스위프트가 전세계 투어를 다닌 것이 꽤나 화제가 됐었죠. 조단위의 경제적 효과를 불러왔다는 이야기가 나올 정도니 대단하다라고 생각하고 넘어가기만 했던 일이었습니다.\n\n그런데 이런 어마어마한 인파를 처리해야하는 티케팅 서비스가 과연 멀쩡했을까? 여기에는 생각이 닿지 않았었는데 글을 보고 굉장히 재밌단 생각이 들었습니다. 마침 요즘 대용량의 트래픽을 처리하는 경우가 생기면 어떻게 해야하는가에 대한 고민을 좀 해보고 있었던 참이기도 했구요.\n\n이 글에서는 시스템적으로 대용량의 트래픽을 처리하기 위해 했어야하는 접근을 실제 사례를 통해 이야기해서 꽤나 흥미롭게 읽을 수 있었습니다.\n\n1. 캐싱\n2. 우아한 저하\n3. 3자 의존성: 시스템은 가장 약한 링크만큼만 강력하다.\n\n---\n## 20년 동안 프로그래밍을 한 후배인 나와 당신에게 주는 조언\n\n: <https://medium.com/dev-publicity/advice-to-my-younger-self-and-you-after-20-years-in-programming-a3a2ccc7a942>\n\n미디엄에서 최근에 가장 많이 읽은 글이라고 추천이 돼서 읽은 글입니다. 저자는 Alexey Inkin이라는 IEEE 시니어 멤버인 20년 경력 개발자입니다.\n\n대선배로부터 유용한 조언을 받는듯한 내용으로 가득차 있었고, 재미있는 부분은 개발 실력 측면에서 발전하는 것 외의 부분을 신경써야한다고 많이 강조한 점입니다.\n\n* 초기 단계의 기술에 참여하고, 죽어가는 기술에서 벗어나라\n* 응용보다 과학을 선택하라\n* 돈은 자신에게만 투자하지 말라.(금융 투자에 대한 이야기입니다.)\n\n과 같은 이야기를 하는 것이죠. 초기 단계의 기술에 참여하라는 항목에서 제시한 링크가 꽤나 재밌었습니다.\n\n<https://survey.stackoverflow.co/2023/#section-salary-salary-and-experience-by-language>\n\n위의 링크는 프로그래밍 언어별 평균 연차와, 중위 연봉을 스택오버플로우에서 통계낸 것입니다. 빨간 것일수록 사용자가 많고, 파란 것일수록 적어서 신뢰도가 떨어진다 할 수 있죠.\n\n요 근래 면접을 보다보면 \"GO\"와 \"RUST\"에 관심이 있는 기업들이 늘고 있다는 생각을 좀 하게 됐습니다. 얼마 전 일론 머스크는 RUST에 대한 강한 관심을 내비치기도 했고, 마이크로 소프트 역시도 RUST를 이용해서 윈도우를 뜯어고치고 있단 이야기가 화제가 되기도 했죠.\n\n새로운 언어를 올해에는 하나쯤 공부해볼까 하는 중이고, 위의 둘 중 하나를 선택하려고 하고 있습니다. 아마 서버 백엔드 쪽으로 직장이 결정되면 GO를, 소프트웨어 쪽으로 가게 된다면 RUST를 공부하는 쪽으로 하지 않을까 싶네요. 일단 당장 목표로 잡아둔 것은 금주부터 해서 GO를 활용한 많은 인원을 수용할 수 있는 실시간 채팅 프로그램을 토이프로젝트로 하나 진행해보려고 하고 있습니다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"2월 2주차 포스트","date":"2024-02-12T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-02-20-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-02-20-Medium review.md","category":"WeeklyPosts","title":"2월 3주차 포스트","subtitle":"","content":"\n1. Embracing Chaos: The Unexpected STrength of the Chaos Monkey Principle\n2. Trying to Innovate? Put down your hammer\n3. I Tried Multiple AI Coding Assistants. These Are The Best\n4. Top 10 Platform Engineering Tools You Should Consider in 2024\n\n\n---\n\n## 혼돈 수용: 혼돈 원숭이 원리의 예상치 못한 힘\n\n: <https://medium.com/illuminations-mirror/destroying-everything-makes-it-better-the-chaos-monkey-principle-3bc845a76cc4>\n\n넷플릭스에서 사용하는 실패 주입 도구인 카오스 몽키에 대한 글입니다. 이 도구는 소프트웨어 코드 정글에서 혼란을 일으키는 원숭이처럼 네트워크에 오류를 체계적으로 도입하도록 설계돼있습니다.\n\n---\n\n## 혁신을 시도하고 있나요? 망치를 내려놓으세요\n\n: <https://rachelaudige.medium.com/trying-to-innovate-put-down-your-hammer-a8f9810b1d1a>\n\n망치를 들고 있으면 모든 것이 못으로 보인다는 말에 대한 글입니다. 화재 사태에서 불을 도망칠 때 전문가의 의견을 따라 명령을 받아 가만히 있어야했음에도 도망치다가 전부 죽은 사람의 이야기에서 볼 수 있듯, 우리는 자신의 전문지식으로 인해 무엇이 옳은지 판단하지 못하는 경우가 발생합니다.\n\n이처럼 우리는 도구와 이미 알고 있는 것에 집착하기 때문에, 잘못된 선택을 하게 되고 따라서 **효과적으로 도구를 버리는** 다음과 같은 전략이 필요합니다.\n\n```md\n1. 일반적인 도구를 버리고 다른 혁신 방법에 대해 호기심을 가지십시오.\n2. 다양한 방법으로 배우십시오\n3. 도구 세트에 대한 개념적 프레임워크를 만들어두십시오.\n```\n\n---\n\n## 나는 여러 AI 코딩 어시스턴트를 시도했습니다. 이것들이 최고입니다\n\n: <https://medium.com/artificial-corner/i-tried-multiple-ai-coding-assistants-these-are-the-best-bb4d6a735fc1>\n\n다섯 가지의 인공지능 코딩 어시스턴트를 시도한 결과를 장단점을 통해 공유하는 글입니다.\n\n```md\n1. Github Copilot: Favorite general-purpose coding assistant\n2. CodiumAI: Good for testing\n3. AWS Code Whisper: Good for writing apps linked to the Amazon ecosystem\n4. Tabnine: An intuitive coding companion\n5. ChatGPT/Bard: Amazing for learning to code\n```\n\n---\n\n## 2024년에 고려해야 할 최고의 플랫폼 엔지니어링 도구 10가지\n\n: <https://medium.com/@rphilogene/top-10-platform-engineering-tools-you-should-consider-in-2024-892e6e211b85>\n\n플랫폼 엔지니어링은 소프트웨어 릴리스를 빠르게 제공하는 데 도움을 주기 위해 플랫폼을 설계하고 구축하는 것입니다. 이 글에서는 2024년에 고려해야 할 최고의 플랫폼 엔지니어링 도구 10가지를 소개합니다.\n\n```md\n1. Kubernetes: 컨테이너 오케스트레이케\n2. Crossplane: 크로스 쿠버네티스 인프라 관리\n3. Qovery: 내부 개발자 플랫폼(IDP)\n4. Gitlab CI: CI를 위한 통합 도구\n5. port(getport.io): 개발자 포털 구축\n6. AgroCD: Kubernetes 기반 CD 도구\n7. Docker: 컨테이너 기반 애플리케이션 배포\n8. Terraform: 인프라 프로비저닝\n9. Doppler: 환경 변수 관리\n10. DataDog: 모니터링 및 분석 도구\n```\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"2월 3주차 포스트","date":"2024-02-20T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-02-27-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-02-27-Medium review.md","category":"WeeklyPosts","title":"2월 4주차 포스트","subtitle":"","content":"\n1. <https://learningdaily.dev/2023-in-review-4-key-takeaways-for-developers-a5bcc8b86133>\n2. <https://medium.com/@techworldwithmilan/software-architecture-as-code-tools-331a11222da0>\n3. <https://levelup.gitconnected.com/build-a-personal-ai-tech-news-agent-94e7a2e508fe>\n\n---\n\n## [2023년 회고: 개발자를 위한 4가지 주요 교훈](https://learningdaily.dev/2023-in-review-4-key-takeaways-for-developers-a5bcc8b86133)\n\n본 글은 2023년의 주요 시사점으로 다음의 네 가지를 제시합니다.\n\n1. 클라우드 컴퓨팅에는 점검이 필요하다.\n2. 생성형 AI가 모든 것을 바꾸고 있으며, 개발자가 혁명을 주도할 것이다.\n3. 스마트 시스템 설계가 더 중요해지고 있다.\n4. API 및 제품 디자인에 대한 이해가 필요하다.\n\n해당 관점은 당분간 유지될 것이라 생각하고 이에 맞춰 준비를 일단 하되, 시장의 동향을 지속적으로 관찰하며 변화에 대응해야 한다는 생각을 하게 됐습니다.\n\nAPI 및 제품 디자인에 대한 이야기가 나오면서 프로그램을 작성할 때 제가 작성하고 있는 코드들의 디자인에 대해 더 신경쓰고, 다른 사람이 작성한 코드를 참고해보는 연습을 하고 있습니다.\n\n생성형 AI를 통한 코드 작성은 확실히 요즈음 많은 도움을 받고 있네요. 생산성과 동시에 제 개인적인 성장에도 크게 도움이 되고 있다고 느끼는 중입니다.\n\n스마트 시스템과 클라우드 컴퓨팅은 제가 요 근래 자주 가져오는 주제들 중에 비 정상적으로 엄청난 트래픽이 몰려들었을 때 이에 대해 resilient한 시스템을 어떻게 하면 설계할 수 있을 지에 대한 논의입니다. 이에 대해 go를 이용하면 더 유연한 시스템을 설계하는 데 유리하지 않을까 하는 생각이 들어 요 근래 학습을 시작해서 chatapplication을 작성하고 있습니다.\n\n---\n\n## [소프트웨어 아키텍처 및 기타 다이어그램을 코드로 생성할 수 있는 다양한 도구의 소개](https://medium.com/@techworldwithmilan/software-architecture-as-code-tools-331a11222da0)\n\n컴퓨터가 이해하는 프로그램은 코드이지만, 사람이 이해하기 위해서는 코드 외의 다양한 추상화 수단을 사용하는 것이 유용합니다.\n\n해당 아티클에서는 이미 작성된 코드를 자동으로 다이어그램으로 변환해주는 도구를 포함해서 markdown, javascript 등을 통해 마인드맵, 순서도 등을 생성할 수 있는 다양한 도구를 소개합니다.\n\n* [Structurizr](https://structurizr.com/)\n: C4 모델의 코드를 통해 소프트웨어 아키텍처 다이어그램을 생성할 수 있는 도구입니다.\n\n* [PlantUML](https://plantuml.com/ko/)\n: text를 통해서 UML를 작성할 수 있는 도구입니다.\n\n* [Diagrams](https://github.com/mingrammer/diagrams)\n: 파이썬 코드를 클라우드 시스템 아키텍처 다이어그램으로 변환해주는 도구입니다.\n\n* [Go diagrams](https://github.com/blushft/go-diagrams)\n: Diagrams와 동일하지만 go 언어를 사용하여 작성된 코드를 다이어그램으로 변환해주는 도구입니다.\n\n최근 디자인 패턴을 공부하면서 프로그램들을 이해하기 편하게 구조화하는 것의 필요성을 느끼고 있습니다. 다음에 읽으려고 생각하는 책 중 하나는 [UML 실전에서는 이것만 쓴다](https://ebook-product.kyobobook.co.kr/dig/epd/ebook/E000003215770)이기도 합니다.\n\n마침 작성중인 toy project가 go로 작성되어 있는 만큼 go diagrams를 사용해보고 이에 대한 경험도 공유해볼까 합니다.\n\n---\n\n## [개인용 AI 기술 뉴스 에이전트 구축하기](https://levelup.gitconnected.com/build-a-personal-ai-tech-news-agent-94e7a2e508fe)\n\n본 글은 개인용 AI 기술 뉴스 에이전트를 구축하는 방법에 대해 소개합니다.\n\n요 근래 제가 가장 많이 사용하는 뉴스 에이전트는 구글과 medium입니다. 일반적인 뉴스가 정치, 연예, 스포츠 등에 대해서는 훌륭하게 다뤄주는 경우가 많지만 기술 뉴스에 대해서는 그렇지 않은 경우가 많아서, 기술 뉴스를 따로 모아서 보고 싶은 생각이 들었습니다.\n\n마침 이에 대한 글도 있어서 읽어보게 되었는데 굉장히 매력있고 저만의 에이전트를 구축해보면 재미있겠다는 생각이 들었습니다. 현재 진행 중인 toy project가 끝나면 해당 프로젝트를 진행해보면 좋을 것 같습니다.","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"2월 4주차 포스트","date":"2024-02-27T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-03-03-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-03-03-Medium review.md","category":"WeeklyPosts","title":"2월 5주차 포스트","subtitle":"","content":"\n1. <https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42>\n2. <https://levelup.gitconnected.com/system-design-interview-question-design-spotify-4a8a79697dda>\n\n---\n\n## 자바스크립트는 왜 프로토타입을 선택했을까?\n\n: 자바스크립트에서 추상형태 명칭을 클래스가 아니라 프로토타입을 선택한 철학적인 논의\n\n프로그래밍의 패러다임은 더욱 높은 추상화를 구현하는 방향으로 발전하고 있습니다. 클래스는 우리가 이제는 자연스럽게 받아들이는 개념이지만, 자바스크립트는 클래스가 아닌 프로토타입이라는 개념을 선택했습니다. 지금은 ES6에 들어오면서 자바스크립트 역시도 클래스를 지원하고 있다고 합니다.\n\n클래스는 플라톤의 이데아의 관점에서 일정하게 변하지 않는 공통적인 특성을 추상화한 것이라면, 프로토타입은 비트겐슈타인의 전형적인 예시 관점을 통해서 사물을 그룹화하는 방식을 추상화한 것입니다. 그리고 이런 근간에 있는 아이디어를 통해 언어가 가지는 특질 전반적인 것이 바뀔 수 있다는 것을 알 수 있습니다.\n\n규모가 크고 오래 지속될 프로젝트일수록 내가 결정한 디자인적인 선택이 어떤 영향을 미칠지에 대해 충분히 고민해야 한다는 것을 알 수 있었던 좋은 글이었습니다. 기회가 된다면 이런 결정적인 디자인적인 선택들에 대한 이야기를 더 접할 수 있었으면 좋겠습니다.\n\n---\n\n## System Design Interview Question: Design Spotify\n\n: 수치적으로 더 큰 규모의 시스템을 설계하는 방법에 대한 논의\n\n이 글은 spotify와 같이 많은 유저가 이용해야하는 시스템을 설계할 때 어떤 부분을 고려해야하는 지에 대해 이야기해줍니다.\n\n만약 50만의 유저와 3000만 곡을 다루는 시스템을 설계한다면 이를 효과적으로 처리하기 위해 웹 서버에 대한 로드 밸런싱, db 설계는 어떻게 해야할 것인가?\n\n더 나아가서 5000만의 유저와 2억개의 곡을 다루는 시스템을 설계한다면 caching과 CDN, db scaling을 어떻게 도입해야할 지에 대한 이야기를 다룹니다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"2월 5주차 포스트","date":"2024-03-03T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-03-10-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-03-10-Medium review.md","category":"WeeklyPosts","title":"3월 1주차 포스트","subtitle":"","content":"\n1. <https://medium.com/musinsa-tech/journey-of-a-frontend-monorepo-8f5480b80661>\n2. <https://bootcamp.uxdesign.cc/dont-make-this-common-job-interview-mistake-cf0a22aedd02>\n3. <https://levelup.gitconnected.com/30-python-concepts-i-wish-i-knew-way-earlier-3add72af6433>\n\n---\n\n## 모노레포 이렇게 좋은데 왜 안 써요?\n\n모노레포는 여러 프로젝트를 하나의 저장소에 모아서 관리하는 개발 방식입니다. 이 글에서는 모노레포를 사용하면서 얻은 이점에 대해서 이야기합니다.\n\n최근에 채팅 어플리케이션 프로젝트가 생각보다 규모가 많이 거대해지면서 이를 관리하는 방법에 대한 고민을 하게 됐습니다. 사용하게 될 모듈별로 레포지토리를 따로 둬야 할까? git flow를 적용해야할까? trunk based development를 적용해야할까?\n\n그런 상황에서 이 글과 구글 엔지니어는 이렇게 일한다라는 책을 읽으면서 모노레포와 trunk based development를 사용하기로 결심하게 됐습니다.\n\n이는 충분한 관리를 적용한다면 모노레포와 trunk based development를 통해서 더 빠르게 개발할 수 있고, 안정적인 코드를 유지할 수 있을 것이란 생각이 들었기 때문입니다.\n\n구글이 아니라도 꽤나 많은 회사들이 모노레포를 사용하고 있다고 하는만큼 한번쯤 고민 해 볼만한 주제라고 생각합니다.\n\n---\n\n## Don’t make this common job interview mistake\n\n최근 많은 면접을 보면서 어떤 부분 때문에 면접에서 떨어지는지에 대해 고민을 많이 했습니다. 그리고 이 글에서 한 이야기와 데일 카네기의 '인간관계론'을 통해 제가 가지고 있었던 문제는 '상대가 원하는 것이 무엇인지'에 대한 고민이 부족했다라는 부분이란 생각을 하게 됐습니다.\n\n비단 면접에만 해당하는 부분이 아니라, 다른 사람과의 좋은 관계를 맺기 위해 그 사람의 입장을 이해하기 위해 경청하고 관심을 가지는 것은 중요한 요소입니다.\n\n나는 백엔드 개발자로써 회사에서 생각할 때 어떤 부분에서 기여를 할 수 있는 사람인가, 그렇다면 나를 원할만한 회사는 어떤 곳일까, 내가 기여할 수 있는 부분을 어필하기 위해서는 어떤 이야기를 준비해서 전달해야할까에 대해 고민해보게 됐습니다.\n\n---\n\n## 30 Python Concepts I Wish I Knew Way Earlier\n\n이 글은 파이썬을 사용하면서 사용하기 유용한 30가지 테크닠에 대해 이야기합니다. 기존에 몰랐던 것들만 따로 정리하자면 다음과 같습니다.\n\n1. pprint: 파이썬의 딕셔너리를 예쁘게 출력해주는 모듈\n2. ternary operator: 파이썬의 삼항 연산자\n   * ```python\n     a = 1 if b > 0 else 0 if b < 0 else -1\n     ```\n3. yield 키워드: 제너레이터를 만들 때 사용하는 키워드\n4. while else: while문이 break 없이 종료되었을 때 실행되는 else문\n\n이 밖에도 다양한 테크닉들이 있어서 한번쯤 읽어보면 좋을 것 같습니다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"3월 1주차 포스트","date":"2024-03-10T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-03-20-Medium review","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-03-20-Medium review.md","category":"WeeklyPosts","title":"3월 2주차 포스트","subtitle":"","content":"\n## 목차\n\n1. [개발자를 위한 10가지 유용한 VS Code 확장 프로그램](https://levelup.gitconnected.com/10-must-have-vs-code-extensions-for-developers-7ddc22d81117)\n2. [PostgreSQL vs MySQL: 나의 사용 사례에 더 적합한 것은 무엇일까?](https://www.integrate.io/ko/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case-ko/)\n3. [블룸 필터 - 1% 오류율로 8배의 공간을 활용할 수 있는 자료구조](https://maloveforme.tistory.com/102)\n\n---\n\n## 10 Must-Have VS Code Extensions for Developers[^1]\n\nBetter Comments, Auto Rename Tag, Bookmarks, Import Cost와 같은 유용한 **VS Code 확장 프로그램**을 소개해주는 글입니다. 여기 있는 것들 중에서 상당 수를 해당 포스트를 읽어본 이후에 채용해봤는데 만족하고 있습니다.\n\n예를 들어 **VSCode - Icons** 같은 경우는 **Explorer 창**에서 파일들의 **아이콘**이 좀 더 **직관적**으로 보여지게 해 줍니다. 이는 파일을 찾는 데 유용할 뿐 아니라, 현재 프로젝트의 **구조를 파악**하는 데도 도움이 됩니다.\n\n**편의성**은 때로는 생각 이상으로 **생산성**을 높여주기도 하는데, 이 글에서 제안하는 확장 프로그램들이 그런 것들이 꽤 많았습니다.\n\n---\n\n## MySQL-쉽고 안정적이다 vs PostgreSQL-복잡한 문제 해결을 할 수 있다[^2]\n\n**PostgreSQL**과 **MySQL**은 둘 다 널리 쓰이는 **오픈 소스 RDBMS**입니다. 이 둘 중에서 어느 것을 선택해야하는 지에 대한 판단을 해야 하는 상황은 이 때문에 꽤나 흔합니다. 이 글은 이 둘의 **차이점**을 설명하고, 어떤 상황에서 어느 것을 **선택**하는 것이 더 **적합**한지에 대해 설명하고 있습니다.\n\n이 글에서 **핵심**은 다음으로 정리할 수 있습니다.\n\n```md\nMySQL: 쉽고, 빠르고 안정적이다.\nPostgreSQL: 복잡한 쿼리와 대규모 데이터베이스를 처리할 수 있는 풍부한 기능을 제공한다.\n```\n\n좀 더 자세하게 자신의 사용 사례에 어느 것이 **적합**할 지에 대해 정보가 필요하다면, 이 글을 읽어보시는 것을 추천합니다.\n\n---\n\n## 블룸 필터 - 1% 오류율로 8배의 공간을 활용할 수 있는 자료구조[^3]\n\n**블룸 필터**는 **확률적 자료 구조**로, **비트 배열**과 **해시 함수**로 구성되어 있습니다. 이 글에서는 블룸 필터의 **원리**와 **활용**에 대해 설명하고 있습니다.\n\n일반적인 자료구조들과 달리 블룸 필터가 **확률적**이 된 이유는 **공간을 절약**하기 위해서 입니다. 비록 *오류가 발생할 확률*이 있지만, 이보다 **공간을 절약**하는 것이 더 중요한 상황에서 블룸 필터를 사용할 수 있습니다.\n\n예를 들어 **100만 개의 URL**을 저장할 때 **일반적인 해시 테이블**을 사용한다면 최소 **25MB**의 공간이 필요하지만, 블룸 필터를 사용한다면 **1%**의 False Positive를 감수하면서 **1.13MB**의 공간으로 저장할 수 있습니다.[^4]\n\n최근 **대용량 데이터**를 **효율적**으로 처리하는 것에 관심이 많았는데, 그 방법 중 하나인 **블룸 필터의 원리**에 대해 알 수 있었던 좋은 글이었습니다.\n\n---\n\n[^1]: <https://levelup.gitconnected.com/10-must-have-vs-code-extensions-for-developers-7ddc22d81117>\n[^2]: <https://www.integrate.io/ko/blog/postgresql-vs-mysql-which-one-is-better-for-your-use-case-ko/>\n[^3]: <https://maloveforme.tistory.com/102>\n[^4]: [What is the advantage to using bloom filters - stack overflow](https://stackoverflow.com/questions/4282375/what-is-the-advantage-to-using-bloom-filters)\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"3월 2주차 포스트","date":"2024-03-20T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-03-25-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-1st/2024-03-25-Post reviews.md","category":"WeeklyPosts","title":"3월 3주차 포스트","subtitle":"","content":"\n## 목차\n\n1. [성능 테스트 툴을 통한 **Go** 알아보기 - Go의 개요](https://medium.com/@joaovitorcoelho10/building-a-performance-testing-tool-from-scratch-03dc7acb3687#cf59)\n2. [**API 게이트웨이**가 필요한 이유 - **마이크로 서비스**를 통합하기](https://medium.com/@dmosyan/why-do-you-need-api-gateway-770f10e02beb)\n3. [여기서는 안장을 팔지 않습니다 - 그리고 **slack**은 **채팅프로그램**이 아닙니다](https://medium.com/@stewart/we-dont-sell-saddles-here-4c59524d650d)\n\n---\n\n## **성능 측정기**를 처음부터 작성하기 - **Go의 특징** 개요[^1]\n\n작성자의 **[Jovi](https://github.com/joaovsc10/jovi/tree/main)**라는 어플리케이션을 개발하는 과정을 설명한 글입니다. 이 어플리케이션은 **성능 테스트 툴**로, **Go** 언어로 작성되었습니다.\n\n추후에 현재 프로젝트에서 **성능 측정을 위한 툴**도 만들어야하고 Go를 사용하지만 이에 대한 이해가 모자라단 생각도 많이 하고 있었는데, 이에 대한 정비를 할 수 있는 좋은 글이었습니다.\n\n---\n\n## **API 게이트웨이** - 마이크로 서비스 아키텍처의 **단일 진입점**[^2]\n\n현재 진행 중인 프로젝트는 **모놀리식 아키텍처**로 구성되어 있지만, **마이크로 서비스 아키텍처**에 대해 이해를 해야 현재 사용중인 아키텍처의 문제점을 파악하고 장점을 활용할 수 있을 것이라고 생각합니다. 이 때문에 마이크로 서비스 아키텍처에 관련한 글도 찾아보는 중입니다.\n\n저자가 설명하는 **API 게이트웨이**는 마이크로 서비스 아키텍처에서 시스템 가장자리에서 **단일 진입점**을 제공하는 역할을 합니다. 예를 들어 gRPC, RESTful API 등 **여러가지 프로토콜**을 다른 서비스로 제공하고 있을 때, 이를 **통합해서 접근**할 수 있도록 해줍니다.\n\n이 글에서 API 게이트웨이가 **해결할 수 있는 문제**라고 주장하는 것은 다음과 같습니다.\n\n* 프런트엔드와 백엔드 사이에 어댑터/파사드를 사용하여 **결합을 줄입니다**.\n* 백엔드 서비스를 집계/변환하여 **소비를 단순화**합니다.\n* 위협 감지 및 완화를 통해 **API의 남용을 방지**합니다.\n* API가 소비되는 방식 **이해**(관찰 가능성)\n* API **수명주기 관리**를 통해 API를 제품으로 관리\n* 계정 관리, 청구, 결제를 활용한 **API 수익화**\n\n**API 게이트웨이**부터 시작해서 **마이크로 서비스 아키텍처**에 대한 이해를 높이는 데 도움이 되었던 글이었습니다.\n\n---\n\n## **피상적인 것**이 아니라 사람이 원하는 **본질적인 것**을 어필하라[^3]\n\n**slack이 판매하는 것**은 무엇이라고 생각하시나요? 보통은 **채팅 프로그램**이라고 말할 것입니다. 하지만 저자는 그렇게 접근했으면 slack은 지금과 같은 성공을 거두지 못했을 것이라고 주장합니다.\n\n그렇다면 **slack이 판매하는 것은 무엇일까요?** 이에 대해 저자는 **조직 변화**를 판매했다 말합니다. 커뮤니케이션 비용 절감, 노력이 필요 없는 지식 관리 등을 통해 조직이 **더 나은 팀**이 되어 **성공**하도록 한다는 것입니다.\n\n마케팅이 단순히 제품을 **판매**하는 것이 아니라 **고객의 문제를 해결**하는 것이라는 것을 이해하고, 고객도 알지 못하는 **본질적인 욕망**을 제공하는 것이 중요하다는 것을 알 수 있었던 글이었습니다.\n\n특히 요 근래 스스로를 어필해야하는 상황이 많아지고 **스틱!**과 같은 책을 읽으면서 **마케팅**에 대해 고민하고 있었는데, 많은 도움이 됐습니다.\n\n---\n\n[^1]: <https://medium.com/@joaovitorcoelho10/building-a-performance-testing-tool-from-scratch-03dc7acb3687#cf59>\n[^2]: <https://medium.com/@dmosyan/why-do-you-need-api-gateway-770f10e02beb>\n[^3]: <https://medium.com/@stewart/we-dont-sell-saddles-here-4c59524d650d>\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"3월 3주차 포스트","date":"2024-03-25T00:00:00.000Z","categories":"WeeklyPosts","subtitle":""}},{"postName":"2024-04-04-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-04-04-Post reviews.md","category":"WeeklyPosts","title":"3월 4주차 포스트","subtitle":"분산 dbms, 빌린 땅 위의 성, 일회용 사람, 색을 잃어가는 세상","content":"\n### 목차\n\n- [Postgres vs 분산 DBMS by TPC-C](#postgres-vs-분산-dbms-by-tpc-c)\n- [빌린 땅 위에 성을 짓지 말라: 하루만에 4천만 달러가 증발한 이유](#빌린-땅-위에-성을-짓지-말라-하루만에-4천만-달러가-증발한-이유)\n- [일회용 물건이 일회용 사람을 만들었다](#일회용-물건이-일회용-사람을-만들었다)\n- [왜 세상은 색을 잃고 있는가](#왜-세상은-색을-잃고-있는가)\n\n---\n\n## Postgres vs 분산 DBMS by TPC-C\n\n[포스트 링크](https://blog.ydb.tech/when-postgres-is-not-enough-performance-evaluation-of-postgresql-vs-distributed-dbmss-23bf39db2d31)\n\nPostgres는 복잡하고 거대한 데이터를 처리할 때 쓰이는 강력한 오픈소스 RDBMS입니다. 그렇지만 Postgres는 수직적 확장은 지원하지만 수평적 확장은 제한적입니다. 그리고 컴퓨팅 기기의 수직적 성능 향상이 더뎌진 시점에서 수평적 확장의 필요가 요즘 대두되는 경우가 많기 때문에 Postgres의 한계는 어느 정도인가, 그리고 이를 분산 DBMS인 YDB와 비교할 경우 어떤 차이가 있는지에 대해 TPC-C라는 OLTP 벤치마크를 통해 비교하고 있습니다.\n\n해당 비교가 이루어진 환경에서 Postgres는 분산 DBMS에 비해 불리한 입장이었습니다. 사용한 데이터베이스가 128개의 CPU코어를 사용하는 세 대의 서버로 구축되어 있었기 때문입니다. 그럼에도 불구하고 측정 기준으로 자주 쓰이는 tpmC(Transactions Per Minute per Core)에서 Postgres는 분산 DBMS에 비해 미세하게 앞서는 성능을 보여줬습니다. 하지만 New Order Latency에서는 YDB가 크게 앞섰습니다.\n\nPostgres는 이미 완성되어 자리잡은 오픈소스인 반면 YDB는 그 정도의 지위까지 획득하지 못했고, 분산형 DBMS가 아직 성장 중이란 것을 생각하면 어찌보면 당연한 일일 수도 있습니다. 그럼에도 현재 Postgres가 왜 많은 곳에서 부하가 높은 일을 처리해야할 때 사용하는지에 대한 이유를 엿볼 수 있었고, 분산 DBMS 역시도 가능성이 있다는 것을 확인할 수 있었습니다.\n\n---\n\n## 빌린 땅 위에 성을 짓지 말라: 하루만에 4천만 달러가 증발한 이유\n\n[포스트 링크](https://medium.com/illumination/wittyfeed-a-40-million-company-that-evaporated-overnight-the-reason-facebook-blocked-them-b7b38c750399)\n\n흔히 유니콘이라 불리는 스타트업은 기업 가치가 10억 달러 이상인 10년 이하 비상장 기업을 말합니다. Witty Feed는 이에 근접했었던 기업으로, 바이럴 미디어 컨텐츠를 페이스북을 통해 공유하는 사업을 했습니다. 그리고 한 달 만에 100만 달러의 수익을 낼 정도로 성장했고 트래픽은 수백만명에 달했습니다. 그리고 그 트래픽은 하루만에 단 몇 천명으로 줄었고 수익은 0으로 떨어졌습니다.\n\n이 몰락은 페이스북에서 캠브릿지 애널리티카라는 회사가 페이스북 사용자의 개인 데이터를 정치 광고를 위해 무분별하게 침해했다는 이유로 페이스북이 연방거래위원회로부터 50억 달러의 벌금을 부과 받은 것에서 시작했습니다. 페이스북은 트래픽 알고리즘을 완전히 변경했고 WittyFeed의 플랫폼을 해제했으며 도메인을 차단했습니다.\n\n이 때문에 WittyFeed는 계좌에 돈이 한 푼도 남지 않았고, 직원들은 급여를 받지 못했습니다. 하지만 창립자들은 이 사태에서 미지급 급여의 두 배에 해당하는 회사 지분을 제공하고 마침내 새로운 OTT 플랫폼인 Stage를 구축하는데 성공합니다. 현재 Stage의 가치는 약 4천만 달러에 달합니다.\n\n이처럼 자신이 소유하지 않은 독점적인 플랫폼에 의존하는 것은 위험하다는 것을 배울 수 있는 글이었습니다. 또한, 이러한 위험을 줄이기 위해 다양한 플랫폼에 투자하고 자체 플랫폼을 구축하는 것이 중요하다는 것을 배울 수 있었습니다.\n\n---\n\n## 일회용 물건이 일회용 사람을 만들었다\n\n[포스트 링크](https://medium.com/@ashely.crouch/how-disposable-objects-have-lead-to-disposable-people-7e52096b1b23)\n\nBic 펜, Temu, Hinge. 이것들의 특징은 무엇일까요? 그것은 이들이 우리에게 한 번 사용하고 버릴 수 있는 편리한 것임을 강조한다는 것입니다. 우리에게 위 제품들은 필요할 때 잠깐 쓰고, 필요 없을 때는 버릴 수 있으면 되니 편하게 사용해보라고 이야기합니다. 그리고 이들을 사용하기 시작하는 순간, 우리는 이들에게서 벗어날 수 없게됩니다. 이것이 우리 삶을 파괴하더라도 말입니다.\n\n이처럼 이들은 본인의 일회성을 강조하지만, 저자는 그 일회성이 종속성을 가지고 있으며 파괴적이라고 주장합니다. 그리고 이것들이 가져다주는 사회적인 폐단으로 여러가지가 있으며, 이 중 Hinge와 같이 사람의 관계에 영향을 주는 일회용품은 타인과의 관계를 파괴하는 지경에 이르렀다고 말합니다. 그리고 끝내는 이를 사용하는 사람을 일회용으로 만들고 있다는 것이 저자의 주장입니다.\n\n사회적으로 인기를 끌고 있는 많은 제품들이 편리함을 내세울 때, 과연 그것은 우리가 편리한 삶을 살 수 있게 해주는 것인지 아니면 이들에 종속되는 일회용 삶을 살게 하는 것인가에 대한 의문을 가지게 하는 글이었습니다. 그리고 내 삶이 지속성을 가지게 하기 위해서는 어떤 노력을 해야하는지 되돌아보게 됐습니다.\n\n---\n\n## 왜 세상은 색을 잃고 있는가\n\n[포스트 링크](https://uxdesign.cc/why-is-the-world-losing-color-56f740f465d4)\n\n이 포스트는 문화 전반에서 화려한 색상이 사라지고 검정색, 회색, 흰색 같은 단조로운 색상이 주를 이루고 있는 현상이 나타나고 있다고 주장합니다.\n\n![1844년 전보](https://miro.medium.com/v2/resize:fit:4800/format:webp/0*jrgZGtQsEeJ8crpD.png)\n출처: <https://lab.sciencemuseum.org.uk/colour-shape-using-computer-vision-to-explore-the-science-museum-c4b4f1cbd72c>\n\n![2008년 핸드폰](https://miro.medium.com/v2/resize:fit:4800/format:webp/0*dm_T3vkzCNcZ4K_I.png)\n출처: <https://lab.sciencemuseum.org.uk/colour-shape-using-computer-vision-to-explore-the-science-museum-c4b4f1cbd72c>\n\n그리고 이것은 대량 생산과 표준화를 위해 개성이 희생되는 과정으로 볼 수 있다고 합니다. 어린 시절 집에 있었던 뻐꾸기 시계와 같은 것들은 굉장히 다채로운 색을 가지고 있었던 것으로 기억합니다. 이전보다 개성을 중시하는 시대를 살고 있다고 생각했는데 이와 반대되는 현상도 동시에 나타나고 있단 것을 인지하지 못하고 있었다는 것이 꽤나 충격적이었습니다.\n\n---\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"3월 4주차 포스트","subtitle":"분산 dbms, 빌린 땅 위의 성, 일회용 사람, 색을 잃어가는 세상","date":"2024-04-04T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-04-10-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-04-10-Post reviews.md","category":"WeeklyPosts","title":"4월 1주차 포스트","subtitle":"자유를 판매하는 상인, 버락 오바마의 결정 방법론","content":"\n### 목차\n\n- [나는 자유를 판매하는 상인입니다](#나는-자유를-판매하는-상인입니다)\n- [내가 가장 어려운 결정을 하는 방법](#내가-가장-어려운-결정을-하는-방법)\n\n---\n\n## 나는 자유를 판매하는 상인입니다\n\n[포스트 링크](https://www.youtube.com/watch?v=d6e41W6ZjtY)\n\n기술을 통해 기존에 없었던 물건을 만드는 것은 쉽습니다. 하지만 사용자가 원하는 물건을 만드는 것은 그것을 단순히 만드는 것을 넘어서서 가치를 부여했을 때 이루어지기 때문에 훨씬 어렵습니다. 그 점에서 현대 자동차의 아이오닉 5 로보택시 운전면허 도전 광고는 굉장히 인상 깊었습니다. 본인들의 상품이 어떤 점에서 뛰어난 지에 대해 자랑하는 것이 아니라, 본인의 상품이 도움이 가장 절실한 사회적 약자들에게 자유라는 인류 최고의 가치 중 하나를 제공한다고 이야기하는 방식 때문입니다. 그 사람들은 바로 시각 장애인입니다.\n\n이 광고는 시각 장애인들이 다른 사람들이 누리고 있는 자유를 어떻게 박탈 당하는가부터 이야기를 시작합니다. 우리는 시각 장애인들이 많고 이들이 힘든 삶을 보낸다는 사실을 인식하지 못하지만, 그 이유는 그들이 밖에서 행동하기에 불편하고 이 때문에 이동의 자유가 없기 때문에 그들이 우리 눈에 띄지 않을 뿐이라는 불편한 진실에 대해 이야기합니다. 그리고 그런 시각 장애인 중에 대표로 나온 것이 말이라는 탑승 수단을 애용하던 'Pearl Outlaw'라는 여성이라는 것은 상징적입니다. 마치 시대의 이동수단이 말에서 자동차로 넘어간 것처럼, 그녀에게 새로운 자유를 위해 시대가 넘어갈 것을 암시하는 것처럼 느껴지기 때문입니다.\n\n그녀를 위한 자율 자동차의 면허를 발급할 시험관은 25년 동안 31,500명의 시험 평가를 치르고 16%만의 합격률을 판정내린 베테랑 면접관 'Kandice Jones'입니다. 그런 시험관의 평가를 통해 자율주행에 대한 신뢰를 확보하고자 하는 것 또한 인상 깊습니다. 그리고 그런 그녀는 아이오닉5에 만점 판정을 합니다.\n\n자율 주행은 그 유용성이 높을 것이라 생각되지만, 반발 역시도 크고 그 유용성 역시도 아직 경험하지 못했기에 사람들에게 와닿지 않고 있었다 생각합니다. 이번 광고를 통해 현대 자동차는 그들이 판매하는 상품이 자율주행을 하는 자동차가 아니라, 새로운 자유라는 가치라고 이야기하고 있습니다. 이런 마케팅적인 발상 전환이 굉장히 멋있었습니다.\n\n---\n\n## 내가 가장 어려운 결정을 하는 방법\n\n[포스트 링크](https://barackobama.medium.com/how-i-approach-the-toughest-decisions-dc1b165cdf2d)\n\n답이 없는 어려운 결정을 내리는 것은 인생에서 피할 수 없지만 가장 어려운 일들입니다. 그 중에서도 미국의 대통령이 해결해야하는 문제들은 다른 사람이 겪을 수 없을 만큼 어렵고 수 많은 사람에게 영향을 미치는 만큼 막중한 책임이 따르게 됩니다. 그런 만큼 미국 대통령은 이런 문제를 해결하는 데 있어서 가장 어려운 경험을 많이 한 사람이라 할 수 있습니다.\n\n그런 미국 대통령 중 버락 오바마는 존경할 부분이 많다고 생각합니다. 그가 하는 연설에서부터 생각이 얼마나 깊은지 엿볼 수 있고, 내리는 결정들이 사회적으로 널리 이롭게 작용할 수 있도록 노력한다는 것을 알 수 있기 때문입니다. 그런 그의 결정 방식은 다음과 같은 지침을 따른다고 밝혔습니다.\n\n- 직감을 따르지 말고 건전한 의사 결정 프로세스를 따르라\n  - 전문가의 의견을 진심으로 듣고 사실을 따르라\n  - 회의에 참여하는 모든 사람의 의견에 귀기울여라\n- 자신의 의견에 반대하는 사람과 일해라\n- 인간 관계를 통해 자신을 확인하고 휴식하는 시간을 가져라\n\n이를 요약하면 자신의 판단에 대해 비판적이고 객관적으로 평가받을 수 있는 환경에 있으려고 노력하라고 이해할 수 있습니다. 결국 답이 없는 문제에 대해 해결한다는 것은 그만큼 다양한 관점을 반영해야 하고, 이를 단순히 노력이 아니라 시스템과 환경을 조성하려는 노력이 필요하겠다는 생각을 하게 됐습니다. 동시에 그런 힘든 환경에서 일한다면 자신을 확인하고 휴식하는 시간을 가져야 한다는 것도 알 수 있었습니다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"4월 1주차 포스트","subtitle":"자유를 판매하는 상인, 버락 오바마의 결정 방법론","date":"2024-04-10T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-04-15-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-04-15-Post reviews.md","category":"WeeklyPosts","title":"4월 2주차 포스트","subtitle":"첫번째 팬케이크는 버려라, 기술 직군 경력 우선순위, 2023년 top programming languages","content":"\n### 목차\n\n- [첫번째 팬케이크는 버려라](#첫번째-팬케이크는-버려라)\n- [기술 직군에서 경력을 쌓을 때 우선순위 가이드](#기술-직군에서-경력을-쌓을-때-우선순위-가이드)\n- [2023년 top programming languages](#2023년-top-programming-languages)\n\n---\n\n## 첫번째 팬케이크는 버려라\n\n[포스트 링크](https://medium.com/weirdo-poetry/the-first-pancake-principle-a67e374bceea)\n\n창의적이거나 매력적인 아이디어에 흥미를 느꼈다가 막상 시작하면 본인이 생각하지 못했던 난관들 때문에 압도되는 일이 자주 생깁니다. 저 같은 경우는 이번에 진행한 [채팅 프로젝트](https://github.com/kaestro/chatapplication) 같은 경우가 그랬습니다. 동시 수용 인원 15000명과 1분당 7천개의 메시지 수신을 중계하는 서버를 구축한다는 아이디어는 얼핏 봤을때 너무 매력적이었습니다. 그리고 여기에 사용하면 될 것이라 생각한 기술 스택도 마찬가지였습니다. 그리고 저는 그 아이디어를 구현하기 위해 무작정 시작했고, 압도되는 난관들을 마주했습니다.\n\n저자는 본인이 보이 스카우트 때 팬 케이크를 구우면서 배운 원칙을 통해 이 일은 자연스러운 일이며 오히려 \"신에 대한 희생\"이라고 표현합니다. 이는 무엇을 실제로 시작하기 전에는 무슨 일이 일어날 지 알 수 없기 때문에 조정하는 과정에서는 실패가 발생하는 게 당연하다는 이야기입니다. 마치 팬케이크를 굽기 위한 팬이 처음에 적절하게 달궈졌는지 확인하기 위해 첫번째 팬케이크를 버리는 것처럼 말이죠. 그리고 이 때문에 저자는 첫번째 팬케이크는 버리는 마음가짐을 통해 기대의 부담을 벗어나야 상상력을 제대로 발휘할 수 있다고 말합니다.\n\n저자는 이를 이용해서 본인이 하이쿠로만 말하는 로봇에 관한 연재 만화를 그린 일화를 추가로 제시합니다. 처음에는 모자랐지만 그 아이디어가 완벽해질 때까지 기다렸다면 아무것도 만들어지지 못했을 것이라는 말과 함께요. 이처럼 무언가를 시작할 때 완벽을 추구한다는 잘못된 목표를 가지지 않도록 해야겠습니다.\n\n---\n\n## 기술 직군에서 경력을 쌓을 때 우선순위 가이드\n\n[포스트 링크](https://dnastacio.medium.com/hierarchy-of-career-priorities-c18768d32598)\n\n저자는 Maslow의 욕구 계층 구조를 참고하여 기술 직군에서 경력을 쌓을 때 우선순위를 제안하고, 이를 기반으로 한 자신이 배운 것들을 공유합니다. 이를 참고하면 기술 직군에서 경력을 쌓을 때 어떤 것에 집중해야 하는지에 대한 가이드가 될 수 있을 것이라는 생각을 하게 됐습니다.\n\n![우선순위 계층](https://miro.medium.com/v2/resize:fit:1100/format:webp/1*8tp3caPQO7klijrsv2JDlw.png)\n\n```plaintext\n1. 고용 가능성\n2. 보상과 안정성\n3. 성장과 발전\n4. 일과 삶의 균형 및 웰빙\n5. 목적과 의미\n```\n\n위의 예시들을 통해 4가지 교훈을 제시합니다.\n\n```plaintext\n1. 기술 스택이 고용 가능성을 정의한다.\n2. 노후화 기간인 3년: COBOL\n3. 최첨단을 주의하라.\n4. 고도로 전문화된 도메인 프로젝트를 주의하라.\n```\n\n우선 제품 기술 스택이 직원에게 고용 가능성 관점에서 가장 중요한 요소라는 이야기로 시작합니다. 이는 현재 작업을 이어나갈 사람을 구하는 것과 동시에 이후에 이를 이어받을 사람을 시장에서 구하는 것이 용이해진다는 의미이기 때문입니다. 이 때문에 노후화되고 인기가 없는 기술 스택을 사용하는 상사는 사람을 그만두게 할 수 있다고 이야기합니다.\n\n그리고 이런 기술의 트렌드는 전반적으로 3년을 주기로 변화하고 있으며, 그 예시로 COBOL을 듭니다. 그리고 다음의 github 사용자 활동 분석을 제시해서 이를 뒷받침합니다. 이 트렌드를 보며 javascript, typescript와 같은 기존에 크게 주목하지 않았던 언어에 대해 생각해보고 다른 글들도 찾아보게 됐습니다.\n\n![언어 선호도 변화 추이](https://camo.githubusercontent.com/8718666e98e034746add66bab1ba74bcb6d8670266b2fcc1b9dfef3cff621db7/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f76322f726573697a653a6669743a313130302f666f726d61743a776562702f312a4b59634534697a49396d5042484c4e71735f787552412e706e67)\n\n그렇지만 그렇다고 하여 최첨단의 것을 추구하는 것이 가지는 위험성에 대해서도 경고하며, 특정 기술 스택에 지나치게 의존되어 있지 않도록 주의하라고 이야기합니다. 이는 특정 기술 스택에 의존하게 되면 그 기술 스택이 노후화되거나 인기가 없어질 때 큰 타격을 받을 수 있기 때문입니다.\n\n---\n\n## 2023년 top programming languages\n\n[포스트 링크](https://linuxiac.com/github-top-programming-languages-of-2023/)\n\n| Ranking | Programming Language | Percentage |\n|---------|----------------------|------------|\n| 1       | Python               | 17.715%   |\n| 2       | Java                 | 11.086%   |\n| 3       | Go                   | 10.817%   |\n| 4       | JavaScript           | 10.065%   |\n| 5       | C++                  | 9.712%    |\n| 6       | TypeScript           | 7.610%    |\n| 7       | PHP                  | 4.835%    |\n| 8       | Ruby                 | 4.690%    |\n| 9       | C                    | 4.309%    |\n| 10      | C#                   | 3.531%    |\n\n생각하는 것과 언어 사용의 지표가 많이 다르고, 여러 방면으로 찾아 볼 필요가 있겠다는 생각을 하게 됐습니다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"4월 2주차 포스트","subtitle":"첫번째 팬케이크는 버려라, 기술 직군 경력 우선순위, 2023년 top programming languages","date":"2024-04-15T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-04-21-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-04-21-Post reviews.md","category":"WeeklyPosts","title":"4월 3주차 포스트","subtitle":"","content":"\n### 목차\n\n- [good first issue 라벨을 이용하여 오픈소스 기여하기](#good-first-issue-라벨을-이용하여-오픈소스-기여하기)\n- [빨리빨리? 불안증? 뇌과학자가 소개하는 한국인이 분노하는 이유?](#빨리빨리-불안증-뇌과학자가-소개하는-한국인이-분노하는-이유)\n- [외톨이? 고독사? 한국이 세상에서 가장 외로운 나라가 된 이유?](#외톨이-고독사-한국이-세상에서-가장-외로운-나라가-된-이유)\n- [구글 검색에 블로그 노출시키기](#구글-검색에-블로그-노출시키기)\n- [고루틴의 동작 원리에 관하여](#고루틴의-동작-원리에-관하여)\n\n---\n\n## good first issue 라벨을 이용하여 오픈소스 기여하기\n\n[포스트 링크](https://well-balanced.medium.com/%EA%BC%BC%EC%88%98%EB%A1%9C-%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4-%EA%B8%B0%EC%97%AC%ED%95%98%EA%B8%B0-b34ee4cc2bc2)\n\ngood first issue 라벨을 이용하면 오픈 소스에 기여하는 것이 쉬워진다는 이야기이다. good first issue는 기존의 개발자들이 해결하기 쉬우면서도 진입점으로 사용하기 좋은 이슈들을 해결하지 않고 새로 오픈 소스에 기여하려는 사람들을 위해 남겨두는 라벨이다. 이러한 이슈들을 만든다는 것 자체가 일을 체계적으로 하고 깃허브 생태계에 대한 이해도가 높다는 의미여서 해당 라벨을 기준으로 검색을 하니 확실히 관리가 잘 되고 있는 레포지토리이면서 새로운 사람을 필요로하는 것들을 찾을 수 있었다.\n\n이를 통해 현재 tagsy-discord, vizro와 같은 오픈 소스 프로젝트에 참여를 하는 중이다.\n\n---\n\n## 빨리빨리? 불안증? 뇌과학자가 소개하는 한국인이 분노하는 이유?\n\n[포스트 링크](https://www.youtube.com/watch?v=AJSscwZP1Xs)\n\n최근 한국을 세계에서 가장 우울한 나라라는 이야기가 화제가 되고 있다. 이를 한국은 시스템이 잘 되어 있기 때문에 예측이 가능한 영역이 많아 문제가 되고 있다는 관점이었다. 왜냐하면 예측이 어긋날 때 사람은 고통을 느끼기 때문이다. 이런 예시로 한국은 지하철을 탈 때 환승을 위한 열차 칸과 출구 조차도 신경쓴다는 이야기를 한다. 이와 반대 되게 예측하는 능력이 없으면 불안은 오지 않는다고 하며 그 예시로 아기가 어머니가 집을 나가는 것을 경험하고 예측하게 되는 순간부터 불안을 느끼게 되는 것을 이야기한다.\n\n한국은 이런 예측 가능성 때문에 통제에 대한 욕구가 굉장히 강한 경향을 가지고 있다. 대표적인 것이 사주팔자나 MBTI 같은 것을 통해 사람을 예측하려고 하는 유행이 있다. 여기에 더해 한국은 사회적으로 시기별로 삶에 대해 약속이 어느 정도 되어 있다. 공부를 열심히해서 어느 정도 대학을 가면 어느 정도의 회사를 가고 와 같은 그런 약속이다. 그리고 그런 계획이 깨졌을 때 굉장히 조급해지고, 불안하면서, 분노하게 되는 것이다.\n\n이런 한국의 불안에 대한 근본적인 해답으로 장동선 박사님은 다양성을 존중하는 자세에 대해 이야기한다. 사람들이 다들 비슷한 약속에 맞춰서 사는 그런 트랙이 있는 것이 아니라 다른 형태의 삶을 산다는 것을 인정할 수 있게 되면 이런 불안감을 줄일 수 있을 것이란 이야기이다. 한국은 그런 점에서 다양성과 자유가 굉장히 부족한 나라라고 이야기한다.\n\n결국 행복하게 잘 살기 위해서는 스스로 선택하는 자율성이 필요하고, 누군가 만들어놓은 틀 안에서 살아가지 않는 노력을 해야 한다는 것이다. 이런 이야기를 통해 나 역시도 이전에는 굉장히 우울했던 경우가 있었고 그런 사회적인 배경에서 비슷한 경험을 했었다는 생각을 하게 됐다.\n\n---\n\n## 외톨이? 고독사? 한국이 세상에서 가장 외로운 나라가 된 이유?\n\n[포스트 링크](https://www.youtube.com/watch?v=U5U_jK-xJjM)\n\n한국은 가장 불안한 나라에 이어서 가장 외로운 나라로 평가받고 있다. 대표적으로 한국은 집에서 혼자 있는 것을 가장 좋아하고, 가족과 같이 있어도 외롭다고 느낀다. 이는 집에서도 자기 모습이 아닌 상태로 살아가야 하는 경우가 많기 때문이다.\n\n그렇다면 한국인은 왜 집에서도 온전히 자신의 모습을 보이지 못할까? 그것은 다른 사람의 눈치를 많이 봐야 하기 때문이다. 남이 나를 어떻게 생각할까? 그런데 내가 하고 싶은 말은 무엇인가? 그것은 Destructive social shaming 즉 파괴적으로 사회적인 수치심을 주는 일이 굉장히 많이 일어나기 때문이라고 한다. 대표적인 예시로 연예인들이 연애 등에서 문제가 생기면 그것이 굉장히 큰 사회적인 이슈로 불거지면서 압박을 받게 되는 것을 든다. 이렇기 때문에 한국 사람들은 마음 속으로 꾹꾹 눌러두는 일이 많을 것이라 한다.\n\n이렇게 만성 스트레스를 받으면 사람은 해마가 작아져서 기억력이 나빠지고 학습 능력이 떨어지고, 편도체로 인해 우울 기능이 떨어지며, 전두엽에 악영향을 줘 판단력이 저하된다고 말한다.\n\n||자본주의|유교문화|\n|---|---|---|\n|**단점**|물질주의|눈치&서열|\n|**장점**|개인표현|가족&화합|\n\n이라는 가치들이 있을 때 이들 중에서 안 좋은 것만이 결합된 문화를 가지고 있다는 것이다. 한국 사회가 이런 외로움이 적어지기 위해 1편과 이어져서 놀라움과 예상하지 못한 새로운 인연들이 생기는 것이 중요하다고 이야기를 마치면서 외로움이 무엇인가에 대해 다시 생각해보는 계기가 됐다.\n\n---\n\n## 구글 검색에 블로그 노출시키기\n\n[포스트 링크](https://jsy1110.github.io/2022/google-search-console/)\n\n여태까지 약 4개월이 조금 안되는 기간동안 블로그를 운영하는 중인데, 내 닉네임으로 검색을 하는데 구글 검색창에 나오지 않는다는 사실에 무엇이 문제인지 고민이 많았다. 이전에 google search console에 인증을 해 놨으니 블로그가 검색에 노출되어야 한다고 생각했었고, 단순히 트래픽이 발생하지 않기 때문이라 생각했는데 그것은 아니라는 생각이 들었기 때문이다.\n\n이번에 url을 인덱싱함과 동시에 sitemap을 추가하고, robots.txt 파일 또한 추가해서 검색 엔진이 블로그를 크롤링할 수 있도록 설정을 마쳐둔 상태이다. 아직은 사이트맵 처리만 완료된 상태이고, 크롤링은 되지 않아 내가 수동으로 요청을 해 둔 인덱스만 생성이 돼있다. 이를 더 일찍 했으면 좋았을텐데 아쉬웠고, 개인 블로그를 운영하는 경우에 내가 구현하지 않은 것은 대부분의 경우에 돌아가지 않는다는 사실을 다시금 깨닫는다. 그래도 블로그를 운영하면서 인터넷에 대한 지식이 많이 쌓이고 있는 것을 느낄 수 있었던 귀한 경험이었다.\n\n---\n\n## 고루틴의 동작 원리에 관하여\n\n[포스트 링크](https://ykarma1996.tistory.com/188)\n\n얼마 전 당황해서 고루틴은 프로세스냐 스레드냐는 질문에 프로세스라는 대답을 한 적이 있다. 이는 고루틴은 경량 스레드이지만 스레드는 아니고 병렬보다는 동시성을 활용하기 위해 커널을 통하지 않고 내부적으로 관리하는 컨텍스트 스위칭을 하니까 프로세스라는 잘못된 결론에 도달했었기 때문이다.\n\n추가적으로 조사하면서 goroutine은 runtime scheduler에 의해 green thread로 관리되는 스레드이며, 결론적으로는 스레드라고 부를 수 있다. 다만 시스템콜을 직접적으로 사용하는 goroutine은 스레드라기보다는 프로세스 내에서 관리되는 경량 스레드이므로 양쪽에 속하지 않는다고 말할 수 있을 것 같다. 이런 포스트가 아니라 책을 통한 공부도 한번 쯤 깊게 해 볼 필요가 있을 것 같다.\n\n---\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"4월 3주차 포스트","subtitle":"","date":"2024-04-21T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-04-28-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-04-28-Post reviews.md","category":"WeeklyPosts","title":"4월 4주차 포스트","subtitle":"제목, 관리, 놀이, 스마트폰 사용량","content":"\n### 목차\n\n- [How to Write a Compelling Headline That Isn’t Clickbait](#how-to-write-a-compelling-headline-that-isnt-clickbait)\n- [당신은 충분히 관리하고 있지 않습니다](#당신은-충분히-관리하고-있지-않습니다)\n- [There's something about a run in the rain](#theres-something-about-a-run-in-the-rain)\n- [My Daily Smartphone Usage Reduced By 90% Using This Simple System](#my-daily-smartphone-usage-reduced-by-90-using-this-simple-system)\n\n---\n\n## How to Write a Compelling Headline That Isn’t Clickbait\n\n[포스트 링크](https://blog.medium.com/how-to-write-a-compelling-headline-that-isnt-clickbait-7cb816cec438)\n\n최근 글을 쓰면서 좋은 제목을 작성하는 것에 많은 고민을 하게 된다. 글의 내용을 잘 표현하면서도 사람의 눈길을 끌 수 있는 제목을 만드는 것은 프로그램에서 메소드 이름을 작성하는 것과 비슷하지만, 그것보다는 훨씬 더 어려운 일이다. 내 최근 글의 제목들에는 많이 발전하고 있지만 아직 과하게 어그로성이 짙거나, 글의 내용을 함축하지 못하기도 하고, 지나치게 설명이 모자랄 때도 있다.\n\n여기서 이야기하는 헤드라인의 지침은 다음과 같다.\n\n```markdown\n1. 독자가 일하게 만들지 말라 - 독자가 글에 관심을 가져야하는지 판단하는데 필요한 모든 정보를 제공하라.\n2. 청중에게 적합한 언어를 사용하라 - 일반 독자 대상이라면 전문 용어는 사용하지 말라.\n3. 흥미로운 것에 집중하라 - 모든 내용을 다룰 필요는 없다. 이야기의 가장 흥미로운 부분에 초점을 맞춰라.\n4. 중요성을 어필하라 - 이 글이 독자에게 왜 중요한지를 강조하라.\n```\n\n그리고 이를 활용하는 헤드라인 작성 방법 5단계를 다음과 같이 정리한다.\n\n```markdown\n1. 사실대로 말하라 - 헤드라인은 글의 내용을 정확하게 반영해야 한다.\n2. 흥미롭게 만들라 - 흥미로운 측면에 집중해서 독자가 읽고 싶을법하게 만들어라.\n3. 간결하게 작성하라 - 가능한 간결하면서 설득력이 있어야 한다.\n4. 단호하게 표현하라 - 주장을 하려는 글의 경우 단호해야 한다.\n5. 다른 사람에게 읽어달라 부탁하라 - 다른 사람에게 읽어보라고 부탁하면서 피드백을 받아라.\n```\n\n헤드라인을 요즈음 작성하는 데 도움이 많이 되는 내용이었다.\n\n---\n\n## 당신은 충분히 관리하고 있지 않습니다\n\n[포스트 링크](https://medium.com/onebigthought/youre-not-managing-enough-56dfc99519fd)\n\n암벽 등반에서 아래에서 등산가의 안전을 유지하기 위한 빌레이가 하는 일의 비유를 통해, 업무에서 관리자가 해야하는 일에 대해 이야기한다. 관리자는 상대에 대한 마이크로 관리를 하는 것은 지양해야하지만, 상대에게 성장할 수 있는 공간하는 것을 제공하고 격려하면서 기다리는 수동적인 위치에만 있어서는 안된다. 저자는 이를 위해 세가지 방법론을 제시한다.\n\n```markdown\n1. 명확성을 제공하라 - 명확한 목표, 동기, 기대치를 방법은 규정하지 않되 전부 제공하라.\n2. 액세스, 컨텍스트를 제공하라 - 상대가 필요한 정보에 접근할 수 있도록 하고, 그 정보가 어떤 맥락에서 필요한지를 제공하라.\n3. 계획을 세우라 - 상대가 성공적으로 일을 할 수 있도록 단계와 이정표를 세우라\n```\n\n그리고 위의 것들을 꾸준히 해야한다 이야기한다. 일종의 오픈소스 프로젝트를 한 것인 chat application의 경우 나도 이런 부분들이 모자랐기 때문에 실패했고 이를 개선하고 싶고 해당 방법론을 채용하려한다.\n\n---\n\n## There's something about a run in the rain\n\n[포스트 링크](https://medium.com/runners-life/theres-something-about-a-run-in-the-rain-7afbf4a79810)\n\n**우리는 늙었다고 노는 것을 멈추지 않는다. 다만 놀지 않기 때문에 늙어갈 뿐이다.**라는 조지 버나드 쇼의 유명한 문구로부터 시작하는 이 글은, 비가 올 때 달리기를 한 경험에 대해서 이야기한다. 달리기를 놀이가 아니라 수단으로 생각한다면 비가 오지 않을 때에만 달리기 할 것이지만, 놀이로 생각하기 때문에 본인은 비가 올 때에도 달리기를 할 수 있었다 이야기한다. 그리고 이를 통해 놀이의 중요성에 대해 이야기한다.\n\n나도 요즈음 글쓰기와 달리기를 놀이로써 즐기고 있기 때문에 많은 부분이 공감이 됐고, 내가 하는 일이 쓸모없는 일이 아니라는 위안을 얻을 수 있었다.\n\n---\n\n## My Daily Smartphone Usage Reduced By 90% Using This Simple System\n\n[포스트 링크](https://medium.com/publishous/the-dss-system-that-helped-me-cut-my-daily-smartphone-usage-by-90-aa2d88889e30)\n\n스마트폰 사용량을 줄이기 위한 방법으로 업무용과 개인용으로 나누어 사용하는 방법을 소개한다. 저자는 이를 나눈 뒤에 개인용 스마트폰의 경우 사용 시간 제한을 두면서 스마트폰 사용량을 줄였다고 이야기한다.\n\n나 역시도 비슷한 경험을 lenovo y700 태블릿을 구매하면서 느꼈다. 업무용으로 연락하는 것은 핸드폰에, 취미 생활과 공부라는 용도로 태블릿을 사용하도록 분리하면서 이전과 달리 이들을 사용하느라 쓸모없는 시간을 보내는 양이 많이 줄어들었다.\n\n핸드폰 같은 경우 아직 이를 더 줄이는 노력을 할 필요가 있다고 느끼고 이 때문에 폰을 분리하는 것도 고려해보려한다.\n","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"4월 4주차 포스트","subtitle":"제목, 관리, 놀이, 스마트폰 사용량","date":"2024-04-28T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-05-05-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-05-05-Post reviews.md","category":"WeeklyPosts","title":"5월 1주차 포스트","subtitle":"히어로와 잡부, 자동화의 중용","content":"\n### 목차\n\n- [히어로를 채용하고 잡부를 만드는 스타트업](#히어로를-채용하고-잡부를-만드는-스타트업)\n- [루브 골드버그 장치와 같은 지나친 자동화를 경계하자](#루브-골드버그-장치와-같은-지나친-자동화를-경계하자)\n- [Golang: Improving Your Go Project with Pre-Commit Hooks](#golang-improving-your-go-project-with-pre-commit-hooks)\n\n---\n\n## 히어로를 채용하고 잡부를 만드는 스타트업\n\n[포스트 링크](https://eopla.net/magazines/15449)\n\n사람을 기반으로하는 스타트업에서 능력 있는 인재를 뽑은 다음에 팀으로 만드는 것에 실패하는 경우들에 대해 이야기한다. 문제를 해결할 수\n 있는 능력이 있는 사람은 누구나 히어로이고 그 사람을 뽑는 것은 일반적으로 다른 히어로가 나가는 것과 맞물리게 된다. 그러나 이 히어로가\n 나간 자리를 다시 채우는 경우는 없고, 그러면 이전의 사람이 했던 일들 중에서 다른 사람이 할 수 있는 일들이 떠넘겨지게 된다. 즉 히어로가\n 잡부가 되는 것이다.\n\n이를 방지하기 위해서 해당 포스트에서 제시하는 것은, 히어로가 퇴사 카드를 꺼내들기 전에 먼저 팀을 만들고 그가 불만이 있을 법한 사항들을\n 개선해주자는 것이다. 퇴사 카드를 꺼내든 이후에 연봉 협상과 같은 협상책을 제시하는 것은 이미 늦은 것이다. 이를 위해 할 수 있을 법한 일\n들로는 다음과 같은 것을 제시한다.\n\n1. 정기적인 개인면담\n2. 개인이 처한 상황에 대해 회사가 해줄 수 있는 창구마련\n3. 선심성 발행이 아닌 진심을 담은 회사 히어로서의 성과급 제도 발행 및 적용\n4. 외부 리뷰서비스나 커뮤니티의 지속적인 상황파악을 통한 개선점 도출 및 지속적인 피드백\n5. 히어로를 관리하는 관리자의 역량을 점검\n\n그리고 최종적으로 남은 사람들에 대해서도 배려해달라는 이야기로, 요 근래 스타트업에 지원하면서 가져야 할 마음가짐에 대해 생각해보는 글이\n 됐다.\n\n---\n\n## 루브 골드버그 장치와 같은 지나친 자동화를 경계하자\n\n[포스트 링크](https://itnext.io/rube-goldberg-cloud-architect-a5bbb357b54d)\n\n루브 골드버그 장치라는 보이기는 거창하나 하는 일은 아주 단순한 재미만을 추구하는 연쇄 반응 기계 만화의 비유를 통해 소프트웨어 산업에서\n 자동화를 할 때 주의해야 할 점들에 대해 이야기한다. 루브 골드버그 장치는 매우 복잡한 구조를 가지고 있지만, 그 구조를 이해하면 그것이\n 하는 일은 매우 단순하고 사람이 직접 하는 것보다 더 복잡하고 비효율적일 수 있다. 이처럼 소프트웨어 산업에서도 자동화를 할 때 자동화를\n 이룰 때 하는 이유와 그것이 하는 일이 실제로 가져다 주는 이득이 무엇인지를 잘 생각해야한다는 내용을 담고 있다.\n\n최근 오픈소스 프로젝트를 참가해보면서 소규모 프로젝트들에서조차 pre-commit과 같은 자동화 도구에 지나치게 많은 hook을 사용하고 있다고\n 느껴지는 지점들이 있었다. 처음에는 이것들이 굉장히 멋있고 개발에 도움이 된다고 생각했지만, 해당 장치들을 세팅할 시간에 실제로 코드를\n 작성하는 것이 낫겠다는 생각도 들었고 동시에 이들에 맞추어 코드를 수정하는 시간들이 코드의 품질에 도움이 되는 것인지에 대해 의문이\n 생기는 시점이었다. 이러한 부분들에 대한 경계 및 정도를 잘 판단하는 것이 중요하다는 것을 다시 한 번 느끼게 되었다.\n\n---\n\n## Golang: Improving Your Go Project with Pre-Commit Hooks\n\n[포스트 링크](https://goangle.medium.com/golang-improving-your-go-project-with-pre-commit-hooks-a265fad0e02f)\n\n그럼에도 불구하고 실제로 이들을 사용해보는 경험은 어느 정도 규모가 이미 자리잡은 시스템이 필요한 프로젝트에서는 도입이 필요하다고 생각\n한다. 내 채팅 어플리케이션용 api 서버 역시 개발이 약 3개월차가 되면서 작성한 line의 수가 12000줄을 넘어가고 지운 것이 6000줄이 될 정도\n로 양이 많아지고 있다. 이러한 상황에서 코드의 품질을 유지해야 개발 속도를 높일 수 있을 것이라 생각해서 pre-commit을 도입하게 됐다.\n\n다만 이를 동시에 containerization하는 IaC 역시도 도입하려는 생각을 원래는 하고 있었는데, 그럴 시간에 그냥 개발을 하는 것이 더 나을\n 것이라는 생각이 들었다. 어차피 내가 다른 개발 환경에서 작업할 일도 없고, 다른 사람과 협업할 일도 없을 가능성이 높은 상황인 프로젝트\n이니까.\n","layout":"산문","recommended":false,"data":{"layout":"산문","classes":"wide","title":"5월 1주차 포스트","subtitle":"히어로와 잡부, 자동화의 중용","date":"2024-05-05T00:00:00.000Z","categories":"WeeklyPosts"}},{"postName":"2024-05-12-Post reviews","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/글 후기/Weekly Posts/2024-quarter-2nd/2024-05-12-Post reviews.md","category":"WeeklyPosts","title":"5월 2주차 포스트","subtitle":"rate limit, retry 전략, 자기연민","content":"\n### 목차\n\n- [Rate Limit이란](#rate-limit이란)\n- [Retry 전략: Exponential Backoff, jitter](#retry-전략-exponential-backoff-jitter)\n- [Self-compassion is the motivator you’re missing](#self-compassion-is-the-motivator-youre-missing)\n\n---\n\n## Rate Limit이란\n\n[포스트 링크](https://etloveguitar.tistory.com/126)\n\nrate limit은 서비스가 트래픽을 제어하기 위해 사용하는 방법 중 하나로, 서비스에 대한 요청을 제한하는 것이다.\n 예를 들어 서비스의 트래픽이 10초당 100개로 제한되어 있다면, 10초에 100개 이상의 요청을 보내면 서비스는 요청을\n 거부할 것이다.\n\nrate limit이 필요한 이유는 서비스의 안정성과 성능을 보장하고, 과도한 트래픽으로부터 서비스를 보호하는 등의\n 서비스의 안정성을 보장하기 위함이다. rate limit은 서비스의 트래픽을 제어하기 위해 throttling 방법이라 할 수\n 있으며 방법에는 다음과 같은 것들이 있다.\n\n 1. Hard throttling: 트래픽이 제한을 초과하면 요청을 거부한다.\n 2. Soft throttling: 트래픽이 제한을 특정 비율 이상 초과하면 요청을 거부한다.\n 3. Dynamic throttling: 트래픽이 제한을 초과해도 서버 상태에 따라 요청을 처리할 수 있다.\n\n---\n\n## Retry 전략: Exponential Backoff, jitter\n\n[포스트 링크](https://jungseob86.tistory.com/12)\n\nretry 전략은 서비스의 안정성을 보장하기 위해 사용하는 방법 중 하나로, 서비스에 대한 요청이 실패했을 때\n 다시 시도하는 방법이다. 예를 들어 통신 상태 장애로 인해 요청 혹은 응답이 실패했을 때, 일정 시간 후에\n 클라이언트/서버가 다시 같은 요청/응답을 시도하는 것이다.\n\nretry 전략에는 여러 가지가 있는데 그 중에서 exponential backoff과 jitter가 있다. exponential backoff은\n 재시도 간격을 지수적으로 증가시키는 방법이다. 예를 들어 1초, 2초, 4초, 8초, ... 와 같이 시간 간격을\n 늘려가며 재시도하는 것이다. 이 방법은 서버의 부하를 줄이고, 서비스의 안정성을 보장하기 위해 사용된다.\n\njitter는 재시도 간격을 랜덤하게 설정하는 방법이다. exponential backoff은 재시도 간격이 일정하게 증가하는\n 반면, jitter는 재시도 간격을 랜덤하게 설정하여 서버의 부하를 분산시키고, 서비스의 안정성을 보장하기 위해\n 사용된다.\n\n---\n\n## Self-compassion is the motivator you’re missing\n\n[포스트 링크](https://medium.com/behavior-design/studies-show-self-compassion-is-the-motivator-youre-missing-affbceaf5ee3)\n\n자기에 대해 비판적인 태도를 가지고 징계하거나, 자신을 비난하거나, 자신을 비굴하게 만드는 것은 자신의 성장과\n발전을 방해할 수 있으며, 오히려 자기에 대한 자비로운 태도를 가지는 것은 자신의 성장과 발전을 도울 수 있다는\n내용의 포스트이다.\n\n만약 본인이 아니라 친구가 실패하고 힘든 경험을 했을 때에 그 친구에게 꾸짖는 말을 하지 않을 것이라면, 그것은\n자신에게도 적용되어야 한다. 자기에게 자비롭게 대하고, 비판을 하기 전에 한번 숨을 돌리고 만약 친구에게라면\n어떻게 대할 지 한 번 생각해보는 것으로 자신에게도 자비롭게 대할 수 있다.\n","layout":"산문","recommended":false,"data":{"layout":"산문","classes":"wide","title":"5월 2주차 포스트","subtitle":"rate limit, retry 전략, 자기연민","date":"2024-05-12T00:00:00.000Z","categories":"WeeklyPosts"}}],"category":"WeeklyPosts","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"]},"__N_SSG":true}