{"pageProps":{"postDataJson":{"postName":"2024-03-29-Chat Application review(7)","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/개발일지/Chat Application 개발일지/2024-03-29-Chat Application review(7).md","category":"개발일지","title":"ChatApplication Review(7)","subtitle":"사양이 불명확할 때의 구현, 추상화를 통한 역할 분리","content":"\n## 목차\n\n- [목차](#목차)\n- [느낀 점](#느낀-점)\n- [진행 내용](#진행-내용)\n- [진행 과정](#진행-과정)\n  - [Chat 모듈 구현](#chat-모듈-구현)\n    - [모듈 사양이 불명확할 때의 구현](#모듈-사양이-불명확할-때의-구현)\n      - [clientManager.go](#clientmanagergo)\n    - [추상화를 통해 모듈의 작업 단위를 세부적으로 분리](#추상화를-통해-모듈의-작업-단위를-세부적으로-분리)\n      - [room.go](#roomgo)\n      - [roomManager.go](#roommanagergo)\n    - [이후 진행 방향](#이후-진행-방향)\n\n---\n\n## 느낀 점\n\n1. 협업에서 모듈의 사양 합의가 돼있지 않을 때, 이에 대응하기 용이한 유연한 코드를 작성하는 방법\n2. MVP 내에서도 더 세부 단계에서 어디서부터 구현을 시작해야 하는지에 대한 고민\n3. 추상화를 통해 모듈 내부의 역할을 세부적으로 분리하는 방법\n4. Interface 등의 더 상위 추상화를 통해 모듈 간의 의존성을 줄이는 작업 검토의 필요성\n\n---\n\n## 진행 내용\n\n- Chat 모듈 구현\n\n---\n\n## 진행 과정\n\n### Chat 모듈 구현\n\n#### 모듈 사양이 불명확할 때의 구현\n\n- **문제**\n  - 다른 팀원과 모듈의 사양에 대해 합의가 돼있지 않다\n  - 내가 작성한 chat 모듈을 다른 팀원이 사용할 때 어떤 형태로 부를 것인지 불명확하다\n  - 내가 chat 모듈에서 이용해야하는 다른 모듈의 형태가 불명확하다\n\n- **해결**\n  - 코드를 가능한 작은 단위로 나누어 유연한 변경이 가능하도록 한다\n  - 함수에서 파라미터로 받는 값을 특정한 형태로 제한하고, 이를 활용하는 상위 모듈을 작성한다\n  - 상위 모듈에서는 추후에 다른 모듈에서 이를 호출할 때 필요한 값을 제한한다.\n\n##### clientManager.go\n\n```go\nfunc (cm *ClientManager) CheckClient(sessionID string) bool {\n  _, ok := cm.clients[sessionID]\n  return ok\n}\n\nfunc (cm *ClientManager) GetClient(sessionID string) *Client {\n  if !cm.CheckClient(sessionID) {\n    fmt.Println(\"Client with sessionID\", sessionID, \"does not exist\")\n    return nil\n  }\n\n  return cm.clients[sessionID]\n}\n```\n\n#### 추상화를 통해 모듈의 작업 단위를 세부적으로 분리\n\n- **문제**\n  - 단일 클래스들이 하는 역할이 너무 많아 코드가 복잡해졌다.\n    - 기존에는 client, room, socket이라는 세 개의 클래스를 통해 구현을 작업하려 했음.\n  - 각각의 클래스가 하는 일들이 무엇인지 구분하기 어려웠다.\n    - room, client는 방에 client를 추가하고 이들을 관리하는 작업들을 동시에 했다.\n  - 클래스 간에 하는 영역이 겹치는 부분이 많아 코드 중복이 발생했다.\n\n- **해결**\n  - 클래스가 할 일을 더 작은 단위로 나누어 추상화한다.\n    - [room](https://github.com/kaestro/ChatApplication/blob/4-chat-%EB%AA%A8%EB%93%88-%EC%9E%91%EC%84%B1/myapp/internal/chat/room.go)\n      - 방을 crud하는 메소드를 제공한다.\n      - 방에 들어온 client의 crud를 관리한다.\n      - 방에 들어온 client들 간의 메시지를 주고 받는 작업을 한다.\n  - 이 과정에서 사라진 이들을 관리하는 작업을 Manager 클래스로 분리한다.\n    - ClientManager, RoomManager, ChatManager 등으로 분리한다.\n    - [ChatManager](https://github.com/kaestro/ChatApplication/blob/4-chat-%EB%AA%A8%EB%93%88-%EC%9E%91%EC%84%B1/myapp/internal/chat/chatManager.go)는 최상위 클래스로, RoomManager, ClientManager를 통해 채팅 전반을 관리한다.\n\n##### room.go\n\n```go\nfunc NewRoom() *Room {\n  room := &Room{\n    client_chan: make(map[*Client]*websocket.Conn),\n    broadcast:   make(chan []byte),\n    register:    make(chan *ClientConn),\n    unregister:  make(chan *ClientConn),\n  }\n\n  go room.run()\n\n  return room\n}\n```\n\n##### roomManager.go\n\n```go\ntype RoomManager struct {\n  rooms map[string]*Room\n}\n\nfunc GetRoomManager() *RoomManager {\n  roomOnce.Do(func() {\n    roomManager = &RoomManager{\n      rooms: make(map[string]*Room),\n    }\n  })\n\n  return roomManager\n}\n\nfunc (rm *RoomManager) CheckRoom(roomID string) bool {\n  _, ok := rm.rooms[roomID]\n  return ok\n}\n\nfunc (rm *RoomManager) GetRoom(roomID string) *Room {\n  if !rm.CheckRoom(roomID) {\n    fmt.Println(\"Room with roomID\", roomID, \"does not exist\")\n    return nil\n  }\n\n  return rm.rooms[roomID]\n}\n```\n\n#### 이후 진행 방향\n\n1. 현재 작성중인 포멧의 추가 구현\n2. Interface 등의 더 상위 추상화를 통해 모듈 간의 의존성을 줄이는 작업 필요성 검토\n","layout":"series","recommended":false,"data":{"layout":"series","series":"Chat Application 개발일지","seriesIndex":7,"classes":"wide","title":"ChatApplication Review(7)","subtitle":"사양이 불명확할 때의 구현, 추상화를 통한 역할 분리","date":"2024-04-09T00:00:00.000Z","categories":"개발일지"}},"title":"ChatApplication Review(7)","category":"개발일지","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"ChatApplication Review(6)","category":"개발일지"},"next":{"title":"ChatApplication Review(8)","category":"개발일지"}}},"__N_SSG":true}