{"pageProps":{"postDataJson":{"postName":"2024-03-13-Docker - 멀티 스테이지 빌드","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/개발이야기/2024-03-13-Docker - 멀티 스테이지 빌드.md","category":"개발이야기","title":"Docker를 이용한 유용한 빌드 방법","subtitle":"멀티 스테이지 빌드","content":"\n해당 내용은 [쿠버네티스 교과서 부록](https://github.com/sixeyed/diamol)의 내용을 참고하여 작성하였습니다.\n\n---\n\n## 멀티 스테이지 빌드란\n\nDocker에서 **멀티 스테이지 빌드**는 여러개의 **FROM 명령어**를 사용하여 **여러개의 이미지**를 생성하는 방법입니다. 이를 통해 빌드 프로세스를 단순화하고 이미지 크기를 줄일 수 있습니다.\n\n다음 두 빌드 dockerfile을 비교해보겠습니다.\n\n---\n\n## 예시\n\n### 단일 스테이지 빌드\n\n```dockerfile\nFROM diamol/golang \n\nWORKDIR web\nCOPY index.html .\nCOPY main.go .\n\nRUN go build -o /web/server\nRUN chmod +x /web/server\n\nCMD [\"/web/server\"]\nENV USER=sixeyed\nEXPOSE 80\n```\n\n\n### 멀티 스테이지 빌드\n```dockerfile\nFROM diamol/golang AS builder\n\nCOPY main.go .\nRUN go build -o /server\nRUN chmod +x /server\n\n#app\nFROM diamol/base\n\nEXPOSE 80\nCMD [\"/web/server\"]\nENV USER=\"sixeyed\"\n\nWORKDIR web\nCOPY --from=builder /server .\nCOPY index.html .\n```\n\n둘은 동일한 go로 작성된 웹 서버를 빌드하는 dockerfile입니다. 하지만 두번째 dockerfile은 **멀티 스테이지 빌드**를 사용하여 빌드 **프로세스를 단순화하고 이미지 크기를 줄였습니다.** 해당 방법을 통해 대략 5.2GB의 크기였던 기존의 이미지는 260MB 수준으로 줄어들게 됩니다.\n\n처음으로 멀티 스테이지가 적용된 부분은 처음에 **FROM diamol/golang AS builder** 부분으로 여기에서 빌드를 수행했습니다.\n\n그 다음으로 멀티 스테이지가 적용된 부분은 **FROM diamol/base** 부분으로 여기에서 빌드가 완성된 실행 파일만을 web 디렉토리에 복사하여 사용했습니다.\n\n---\n\n## 결과\n\nDocker의 **멀티 스테이지 빌드**를 통해 빌드 프로세스를 단순화하고 이미지 크기를 줄일 수 있습니다. 또 불필요한 파일이 제거됐기 때문에 **공격 표면**이 줄어들어 **보안도 강화**됐습니다.","layout":"default","recommended":false,"data":{"layout":"default","classes":"wide","title":"Docker를 이용한 유용한 빌드 방법","subtitle":"멀티 스테이지 빌드","date":"2024-03-13T00:00:00.000Z","categories":"개발이야기"}},"title":"Docker를 이용한 유용한 빌드 방법","category":"개발이야기","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"시스템 설계 방법","category":"개발이야기"},"next":{"title":"동시성(Concurrency)과 Golang","category":"개발이야기"}}},"__N_SSG":true}