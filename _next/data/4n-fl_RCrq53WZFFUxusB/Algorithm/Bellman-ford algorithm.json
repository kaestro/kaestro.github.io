{"pageProps":{"postDataJson":{"postName":"2024-05-10-Shortest Path(2)","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/Algorithm/이론/2024-05-10-Shortest Path(2).md","category":"Algorithm","title":"Bellman-ford algorithm","subtitle":"single-source shortest path algorithm(2)","content":"\n### 목차\n\n- [1. Introduction](#1-introduction)\n- [2. Algorithm by pseudocode](#2-algorithm-by-pseudocode)\n- [Algorithm by python](#algorithm-by-python)\n- [Time complexity](#time-complexity)\n- [Reference](#reference)\n\n---\n\n## 1. Introduction\n\n`벨만-포드 알고리즘`은 `단일 출발점 최단 경로 알고리즘` 중 하나로, `음수 가중치`를 가진 간선이\n 포함된 그래프에서도 사용할 수 있다. 음수 가중치를 가진 간선이 포함된 그래프에서도 사용할\n 수 있다는 장점이 있으며, 음수 사이클이 존재하는 경우 false/error를 반환하는 방식으로\n 음수 사이클을 탐지할 수 있다.\n\n---\n\n## 2. Algorithm by pseudocode\n\n벨만-포드 알고리즘은 다음과 같은 방식으로 동작한다.\n\n```plaintext\nBELLMAN-FORD(G, w, s)\n1  INITIALIZE-SINGLE-SOURCE(G, s)  // 모든 정점의 거리 값을 무한대로 초기화하고, 시작점의 거리 값을 0으로 설정합니다.\n2  for i = 1 to |V[G]| - 1  // 그래프의 정점 수 - 1만큼 반복합니다.\n3      for each edge (u, v) in E[G]  // 그래프의 모든 간선에 대해\n4          RELAX(u, v, w)  // u를 통해 v로 가는 경로가 더 짧은지 확인하고, 더 짧다면 v의 거리 값을 갱신합니다.\n5  for each edge (u, v) in E[G]  // 그래프의 모든 간선에 대해\n6      if d[v] > d[u] + w(u, v)  // u를 통해 v로 가는 경로가 v의 현재 거리 값보다 작다면\n7          return false  // 음의 사이클이 존재하므로 false를 반환합니다.\n8  return true  // 모든 간선에 대해 음의 사이클이 없다면 true를 반환합니다.\n```\n\n`BELLMAN-FORD(G, w, s)`: 그래프 `G`와 가중치 함수 `w`, 시작 정점 `s`를 입력으로 받아 최단 경로를 계산한다.\n\n이 때 사용하는 자료구조는 다음과 같다.\n\n- `d`: 정점 `s`로부터 정점 `v`까지의 최단 거리를 저장하는 배열\n- V[G]: 그래프 `G`의 정점 집합\n- E[G]: 그래프 `G`의 간선 집합\n\n---\n\n## Algorithm by python\n\n```python\ndef bellman_ford(graph, start):\n    distance, predecessor = dict(), dict()\n    # 각 노드의 거리와 선행 노드를 초기화합니다\n    for node in graph:\n        distance[node], predecessor[node] = float('inf'), None\n    distance[start] = 0\n\n    # 간선들에 대해 반복적으로 거리를 갱신(relax)합니다\n    for _ in range(len(graph) - 1):\n        for node in graph:\n            for neighbour in graph[node]:\n                if distance[neighbour] > distance[node] + graph[node][neighbour]:\n                    distance[neighbour], predecessor[neighbour] = distance[node] + graph[node][neighbour], node\n\n    # 음수 사이클을 확인합니다\n    for node in graph:\n        for neighbour in graph[node]:\n            assert distance[neighbour] <= distance[node] + graph[node][neighbour]\n\n    return distance, predecessor\n```\n\n---\n\n## Time complexity\n\n벨만-포드 알고리즘의 시간 복잡도는 $O(VE)$이다. 이는 모든 간선에 대해 최단 거리를 갱신하는\n 과정을 $|V| - 1$번 반복하기 때문이다.\n\n---\n\n## Reference\n\n- [Bellman-Ford algorithm - Wikipedia](https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm)\n- [Introduction to Algorithms, 3rd Edition](https://mitpress.mit.edu/books/introduction-algorithms-third-edition)\n","layout":"series_mathjax","recommended":false,"data":{"layout":"series_mathjax","classes":"wide","title":"Bellman-ford algorithm","subtitle":"single-source shortest path algorithm(2)","date":"2024-05-07T00:00:00.000Z","categories":"Algorithm","series":"single-source shortest path algorithm","seriesIndex":2}},"title":"Bellman-ford algorithm","category":"Algorithm","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"Graph","category":"Algorithm"},"next":{"title":"Dijkstra algorithm","category":"Algorithm"}}},"__N_SSG":true}