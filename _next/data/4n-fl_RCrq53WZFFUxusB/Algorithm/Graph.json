{"pageProps":{"postDataJson":{"postName":"2024-05-10-Graph","fullPath":"/home/runner/work/kaestro.github.io/kaestro.github.io/_posts/개발/Algorithm/이론/2024-05-10-Graph.md","category":"Algorithm","title":"Graph","subtitle":"탐색을 위한 자료구조","content":"\n### 목차\n\n- [1. 그래프란?](#1-그래프란)\n- [2. 그래프의 활용](#2-그래프의-활용)\n- [3. 그래프 표현 방법](#3-그래프-표현-방법)\n  - [3.1 인접 행렬(Adjacency Matrix)](#31-인접-행렬adjacency-matrix)\n  - [3.2 인접 리스트(Adjacency List)](#32-인접-리스트adjacency-list)\n- [Reference](#reference)\n\n---\n\n## 1. 그래프란?\n\n그래프는 정점과 간선으로 이루어진 자료구조이다. 그래프는 다음과 같은 특징을 가진다.\n\n- 정점(Vertex): 데이터를 저장하는 공간\n- 간선(Edge): 정점과 정점을 연결하는 선\n- 방향성: 간선에 방향이 있는 경우 방향 그래프, 없는 경우 무방향 그래프\n- 가중치: 간선에 가중치가 있는 경우 가중치 그래프, 없는 경우 비가중치 그래프\n\n## 2. 그래프의 활용\n\n그래프는 주로 탐색을 위해 사용된다. 여기에서 탐색이란 그래프의 정점(vertex)을 방문하기 위해\n간선(edge)을 따라 이동하는 것을 의미한다. 탐색을 통해 그래프의 구조를 파악하거나 특정 정점을\n 찾는 등의 작업을 수행할 수 있다. 대표적인 예시로는 미로 찾기, 최단 경로 찾기, 네트워크 경로\n 찾기 등이 있다.\n\n그래프 탐색 알고리즘에는 다음과 같은 것들이 있다.\n\n- 깊이 우선 탐색(DFS, Depth First Search)\n- 너비 우선 탐색(BFS, Breadth First Search)\n- 다익스트라 알고리즘(Dijkstra Algorithm)\n- 벨만-포드 알고리즘(Bellman-Ford Algorithm)\n- ...\n\n## 3. 그래프 표현 방법\n\n대표적으로 그래프는 대표적으로 다음의 두 가지 방법으로 표현할 수 있다\n\n- 인접 행렬(Adjacency Matrix)\n- 인접 리스트(Adjacency List)\n\n### 3.1 인접 행렬(Adjacency Matrix)\n\n인접 행렬은 2차원 배열로 그래프를 표현하는 방법이다. 인접 행렬은 다음과 같은 특징을 가진다.\n\n- 정점의 개수가 `V`일 때, `V x V` 크기의 2차원 배열이 필요하다.\n- 정점 `u`와 정점 `v`가 연결되어 있으면 `matrix[u][v] = 1`, 연결되어 있지 않으면 `matrix[u][v] = 0`이다.\n- 가중치 그래프의 경우 `matrix[u][v] = w`로 표현한다.\n\n```python\nmatrix = [[1, 0, 0, 1, 0],\n          [0, 1, 1, 0, 0],\n          [0, 1, 1, 1, 1],\n          [1, 0, 1, 1, 0],\n          [0, 0, 1, 0, 1]]\n```\n\n인접 행렬은 다음과 같은 장단점을 가진다.\n\n- 장점\n  - 두 정점이 연결되어 있는지 확인하는데 `O(1)`의 시간 복잡도가 소요된다.\n  - 두 정점 사이의 간선을 찾는데 유용하다.\n  - 가중치 그래프의 경우 간선의 가중치를 쉽게 확인할 수 있다.\n  - 무방향 그래프의 경우 대각선을 기준으로 대칭성을 가진다.\n  - 행렬의 곱셈을 이용해 그래프의 연결 여부를 확인할 수 있다.\n  - ...\n- 단점\n  - 정점의 개수가 많을 경우 메모리 낭비가 심하다.\n  - 특정 정점과 연결된 간선을 찾는데 `O(V)`의 시간 복잡도가 소요된다.\n  - 희소 그래프(Sparse Graph)의 경우 메모리 낭비가 심하다.\n  - ...\n\n인접 행렬은 정점의 개수가 적고 간선의 개수가 많은 밀집 그래프(Dense Graph)의 경우에 적합하다.\n\n### 3.2 인접 리스트(Adjacency List)\n\n인접 리스트는 리스트를 이용해 그래프를 표현하는 방법이다. 인접 리스트는 다음과 같은 특징을 가진다.\n\n- 정점의 개수가 `V`일 때, `V`개의 리스트가 필요하다.\n- 각 리스트는 해당 정점과 연결된 정점들을 저장한다.\n- 가중치 그래프의 경우 각 리스트의 원소는 정점과 가중치를 저장한다.\n\n```python\nadj_list = [[(3, 1)],\n            [(1, 1), (2, 1)],\n            [(1, 1), (2, 1), (3, 1), (4, 1)],\n            [(0, 1), (2, 1), (3, 1)],\n            [(2, 1), (4, 1)]]\n```\n\n인접 리스트는 다음과 같은 장단점을 가진다.\n\n- 장점\n  - 메모리 사용량이 적다.\n  - 특정 정점과 연결된 간선을 찾는데 `O(E)`의 시간 복잡도가 소요된다.\n  - 희소 그래프(Sparse Graph)의 경우 메모리 사용량이 적다.\n  - ...\n- 단점\n  - 두 정점이 연결되어 있는지 확인하는데 `O(V)`의 시간 복잡도가 소요된다.\n  - 두 정점 사이의 간선을 찾는데 비효율적이다.\n  - 가중치 그래프의 경우 간선의 가중치를 확인하기 어렵다.\n  - ...\n\n인접 리스트는 정점의 개수가 많고 간선의 개수가 적은 희소 그래프(Sparse Graph)의 경우에 적합하다.\n\n---\n\n## Reference\n\n- [Introduction to Algorithms, 3rd Edition by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein](https://en.wikipedia.org/wiki/Introduction_to_Algorithms)\n","layout":"mathjax","recommended":false,"data":{"layout":"mathjax","classes":"wide","title":"Graph","subtitle":"탐색을 위한 자료구조","date":"2024-05-10T00:00:00.000Z","categories":"Algorithm"}},"title":"Graph","category":"Algorithm","categories":["ETC","개발이야기","개발일지","디자인패턴","Algorithm","서평","WeeklyPosts","신변잡기","게임이야기"],"adjacentPosts":{"prev":{"title":"Introduction to Shortest Path algorithm","category":"Algorithm"},"next":{"title":"Bellman-ford algorithm","category":"Algorithm"}}},"__N_SSG":true}